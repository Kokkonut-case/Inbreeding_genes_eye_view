[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "When not to avoid inbreeding: a gene’s eye view perspective",
    "section": "",
    "text": "Code\nlibrary(tidyverse) # for tidy style coding and plotting\nlibrary(pander) # for tables\nlibrary(kableExtra) # for scrolling tables\nlibrary(MetBrewer) # for colour palettes based upon artwork housed at the MET\nlibrary(MoMAColors) # for colour palettes based upon artwork housed at MoMA\nlibrary(wesanderson) # for colour palettes based on wes anderson movies\nlibrary(tidybayes) # for plotting distributions\nlibrary(stickylabeller) # labelling facets with strings in ggplot\nlibrary(patchwork) # for combining plots \nlibrary(geomtextpath) # for curved plot annotations\nlibrary(ggtext) # for markdown syntax in plot labels\nlibrary(patchwork)\nlibrary(ggnewscale)"
  },
  {
    "objectID": "index.html#the-seminal-equation",
    "href": "index.html#the-seminal-equation",
    "title": "When not to avoid inbreeding: a gene’s eye view perspective",
    "section": "The seminal equation",
    "text": "The seminal equation\nTo model the inclusive fitness gained from an inbred mating, three components that contribute to fitness are required:\n\nThe number of offspring produced directly: \\(n\\)\nThe reduction in fitness (number of offspring) due to inbreeding: \\(-\\delta n\\)\nThe indirect fitness gain (number of offspring) due to inbreeding: \\(rn\\), where \\(r\\) is the relatedness coefficient\n\nPut together, the inclusive fitness from a single inbred mating is:\n\\[(1 + r)(1 - \\delta)n\\]\nwhile fitness from a single outbred mating is simply \\(n\\).\nWhen \\((1 + r)(1 - \\delta)n \\gt n\\) selection should favour a preference for inbreeding.\nSolving the inequality for \\(\\delta\\):\n\\[\\delta \\lt \\frac{r}{1 + r}\\] which for varying values of \\(r\\) looks like this:\n\n\nCode\ninbreeding_maximum_function &lt;- function(r){\n  r / (1 + r)}\n\n\nparameters &lt;- expand_grid(r = seq(from = 0, to = 1, by = 0.05),\n                          delta = seq(from = 0, to = 1, by = 0.05))\n\nr &lt;- parameters %&gt;% distinct(r)\n\ninbreeding_equilibria &lt;- \n  map_dfr(r, inbreeding_maximum_function) %&gt;% \n  rename(inbreeding_depression = r) %&gt;% \n  bind_cols(r)\n\ninbreeding_equilibria %&gt;% \n  ggplot(aes(x = r, y = inbreeding_depression)) +\n  geom_line(linewidth = 0.8) + \n  coord_cartesian(ylim = c(0, 1)) +\n  labs(x = '_r_, the relatedness coefficient',\n       y = ~delta~'(inbreeding depression)') +\n  scale_x_continuous(expand = c(0, 0.009)) + \n  scale_y_continuous(expand = c(0, 0)) +\n  theme_bw() +\n  theme(text = element_text(size = 14),\n        axis.title.x = element_markdown())\n\n\n\n\n\nCode\n# (prop fitness lost)\\n that can be tolerated\"\n\n\nThe parameter space above the curve shows where inbreeding avoidance should evolve, while the parameter space below the curve shows where inbreeding preference should evolve."
  },
  {
    "objectID": "index.html#accounting-for-sex-differences-in-genetic-architecture",
    "href": "index.html#accounting-for-sex-differences-in-genetic-architecture",
    "title": "When not to avoid inbreeding: a gene’s eye view perspective",
    "section": "Accounting for sex differences in genetic architecture",
    "text": "Accounting for sex differences in genetic architecture\nAs stated above, inclusive fitness in the absence of inbreeding depression is \\((1 + r)n\\). Here \\(r\\) represents the correlation between genotypes carried by interacting females and males, under the implicit assumption that loci appear equally in both sexes. However, given that there is sexual dimorphism in genetic architecture for many taxa, \\(r\\) does not sufficiently represent the correlation between genotypes for all loci.\nTo delineate differences in the effect of \\(r\\) for different regions of the genome, we multiply \\(r\\) with a new variable \\(a\\), the probability that a locus present in one sex is also present in the gametes produced by the other. Unlike \\(r\\) which is relative to the population mean relatedness, \\(a\\) is expressed as an absolute value ranging from 0 to 1.\nThe indirect component of fitness accrued by from an inbred mating becomes\n\\[ran\\]\nand inclusive fitness from an inbreeding event becomes\n\\[(1 + ra)(1 - \\delta )n\\]\nTaking an allele found at a diploid autosomal locus as an example, all of the gametes produced by a relative possess this locus, where they could potentially carry alleles identical by descent. In this case \\(a = 1\\) and the indirect component of inclusive fitness is dictated solely by \\(r\\). The results for this autosomal scenario are presented in Parker (1979), Kokko and Ots (2006) and others who have explored this topic. In contrast, an inbreeding preference allele present at a locus on a Y or W chromosome has no opportunity to propagate any alleles identical by descent through inbreeding, as these chromosomes are not carried by the gametes of the opposite sex mating partner. In this case \\(a = 0\\). However, as inbreeding depression is a result of homozygosity for deleterious recessive alleles throughout the genome, the costs of inbreeding depression are born by all alleles carried by the individual. Conflict over the expression of inbreeding preference between alleles present on autosomes and those present on hemizygous sex chromosomes is immediately clear.\nX- or Z-linked loci present an interesting intermediate case, with sex-specific values for \\(a\\). When the inbreeding locus is carried by the sex with homozygous sex chromosomes, \\(a\\) is half that of autosomal loci, whereas it does not depart from the autosomal case when the locus is found within the hemizygous sex. Using loci on the X as an example, those present in a XX female are only found in ~50% of a interacting males gametes, as the remaining 50% carry Y chromosomes (assuming an even primary sex ratio). When an X-linked locus is found in a male, an interacting female’s gametes all carry X chromosomes and \\(a = 1\\).\nThe X/Z situation is made additionally complex because there is an element of frequency dependence to the kin selected benefits. When an inbreeding allele on an autosome is rare, then the chance of a relative carrying two copies is low, whereas when the allele is common, this chance is much higher. Rarity therefore leads to similar fitness outcomes for autosomal and X/Z linked alleles (when present in the hemizygous sex), while commonality of the allele likely roughly equates to the conflicting situation outlined in the above paragraph. However, frequency dependence might not as relevant as I initially expected, because the inbreeding allele becomes very common quickly within families, even whilst rare across the population (first proposed in Fisher, 1930).\nTable 1. Values of the parameter \\(a\\) for different regions of the genome. \\(a\\) is the one-way probability that a locus carried by one individual is found within the gametes of an opposite sex individual. Note that cytoplasmic chromosomes are assumed to have exclusive maternal inheritance.\n\n\nCode\nx &lt;- \n  c(1, # autosomes, X chromosome males or Z chromosome females, haplodiploid both sexes when producing females \n    0, # Y or W chromosome\n    0.5 # X chromosome females or Z chromosome males\n  )\n\ntibble(`Prob. that opposite sex gametes carry focal locus` = c(1, 0.5, 0),\n       `Relevant cases` = c(\"Autosomes in either sex, X chromosomes in males, Z chromosomes in females, chromosomes in haplodiploids of either sex when reproducing sexually, cytoplasmic chromosomes in males\",\n                            \"X chromosomes in females, Z chromosomes in males\",\n                            \"Y chromosomes in males, W chromosomes in females, cytoplasmic chromosomes in females\")) %&gt;% \n  pander(split.cell = 20, split.table = Inf)\n\n\n\n\n\n\n\n\n\nProb. that opposite sex gametes carry focal locus\nRelevant cases\n\n\n\n\n1\nAutosomes in either sex, X chromosomes in males, Z chromosomes in females, chromosomes in haplodiploids of either sex when reproducing sexually, cytoplasmic chromosomes in males\n\n\n0.5\nX chromosomes in females, Z chromosomes in males\n\n\n0\nY chromosomes in males, W chromosomes in females, cytoplasmic chromosomes in females\n\n\n\n\n\nOnce again we can find the condition where breeding with a relative returns greater fitness than an inbreeding avoidance strategy, this time accounting for genetic architecture\n\\[\\delta \\lt \\frac{ra}{1 + ra}\\]\nIgnoring frequency dependence for now, we can plot the new slopes produced by varying \\(r\\) and \\(a\\):\n\n\nCode\ninbreeding_maximum_function_2 &lt;- function(r, a){\n  (r*a / (r*a + 1))}\n\n\nparameters_2 &lt;- expand_grid(r = seq(from = 0, to = 1, by = 0.01),\n                          a = c(0, 0.5, 1))\n\ninbreeding_equilibria_2 &lt;- \n  map2_dfr(parameters_2 %&gt;% select(r), \n           parameters_2 %&gt;% select(a), \n           inbreeding_maximum_function_2) %&gt;% \n  rename(inbreeding_depression = r) %&gt;% \n  bind_cols(parameters_2)\n\ninbreeding_equilibria_2 %&gt;% \n  mutate(a = case_when(a == 0 ~ \"a = 0\",\n                       a == 0.5 ~ \"a = 0.5\",\n                       a == 1 ~ \"a = 1\")) %&gt;% \n  mutate(a = as.factor(a)) %&gt;% \n  ggplot(aes(x = r, y = inbreeding_depression, linetype = a, label = a)) +\n  geom_textline(linewidth = 0.8, size = 5) + \n # scale_colour_manual(values = c(\"0\" = met.brewer(\"Kandinsky\", 4)[1], \"0.5\" =  met.brewer(\"Kandinsky\", 4)[2], \"1\" = met.brewer(\"Kandinsky\", 4)[3])) +\n  coord_cartesian(ylim = c(0, 1)) +\n  labs(x = '_r_, the relatedness coefficient',\n       y = ~delta~'(inbreeding depression)',\n       linetype = expression(~italic(a)~', the intersex correlation between loci')) +\n  scale_x_continuous(expand = c(0.009, 0)) + \n  scale_y_continuous(expand = c(0.025, 0)) +\n  theme_bw() +\n  theme(text = element_text(size = 14),\n        legend.position = \"none\",\n        axis.title.x = element_markdown())\n\n\n\n\n\n\\(~\\)"
  },
  {
    "objectID": "index.html#differences-between-the-sexes-beyond-genetic-architecture",
    "href": "index.html#differences-between-the-sexes-beyond-genetic-architecture",
    "title": "When not to avoid inbreeding: a gene’s eye view perspective",
    "section": "Differences between the sexes beyond genetic architecture",
    "text": "Differences between the sexes beyond genetic architecture\nParker’s seminal equations:\nIn his 1979 book chapter, Parker considered the inclusive fitness results of breeding with a relative and identified that females and males should have different tolerances for inbreeding depression. The key departure from the monogamous case is that a cost to future reproductive success is included, with the potential to be greater in females than males.\nFor males he found that selection would favour inbreeding with a sister (full-sib) who could otherwise outcross when:\n\\[n(1 - \\delta) + rn(1- \\delta) - cn \\gt rn\\]\nthe first term is the direct number of alleles propagated, the second term is the indirect number of alleles propagated (note that this is weighted by relatedness), the third term is the direct number of alleles that were not directly propagated by the male through outcrossing, and the final opposing term is the number of alleles that would’ve been transmitted had his sister outcrossed (and he forgone mating).\n\\(c\\) is the cost of the present mating, relative to what is lost for a female. This can be considered a ratio of parental investment. When \\(c = 1\\) parental investment in the current bout of reproduction is even between the sexes. Alternatively, if males contribute only sperm to an incestuous mating, the cost of mating is likely very small relative to females i.e. \\(c = 0\\).\nWe add the \\(a\\) variable to the equation and letting \\(n = 1\\), simplify to\n\\[(1-\\delta) + ra(1-\\delta) - c \\gt ra\\]\nWe can again find the condition where breeding with a relative returns greater fitness than an inbreeding avoidance strategy:\n\\[\\delta_{male} = \\frac{1 - c}{1 + ra}\\]\nParker then modelled the condition for monandrous females to prefer incestuous matings when also presented with an outcrossing opportunity.\n\\[n(1 - \\delta) + rn(1-\\delta) - crn \\gt n\\]\nwhich we can write as\n\\[(1-\\delta) + ra(1-\\delta) - rac \\gt 1\\]\nthe inbreeding depression threshold is\n\\[\\delta_{female} = \\frac{ra - rac}{1 + ra}\\]\nNote that when \\(c = 0\\), this is equivalent to the \\(\\delta\\) threshold found in the single mating case.\nPlot the relationship between \\(r\\) and \\(\\delta\\) for several values of \\(c\\) and \\(a\\)\n\n\nCode\nParker_cost_data &lt;- \n  expand_grid(r = seq(from = 0, to = 1, by = 0.01),\n              a = c(0, 0.5, 1),\n              c = c(0, 0.5, 0.9),\n              Sex = c(\"Female\", \"Male\")) %&gt;% \n  mutate(inbreeding_depression = case_when(Sex == \"Female\" ~ (r*a - r*a*c) / (r*a + 1),\n                                           Sex == \"Male\" ~ (1 - c) / (r*a + 1)))\n\n  Parker_cost_data %&gt;% \n  mutate(a = as.factor(a)) %&gt;% \n  ggplot(aes(x = r, y = inbreeding_depression, linetype = a, colour = Sex)) +\n  geom_line(linewidth = 0.9) + \n  scale_colour_manual(values = c(\"Female\" = met.brewer(\"Peru1\", 6)[2], \"Male\" =  met.brewer(\"Peru1\", 6)[3])) +\n  coord_cartesian(ylim = c(0, 1)) +\n  labs(y = expression(delta), \n       x = expression(italic(\"r\")),\n       linetype = expression(italic(\"a\"))) +\n  scale_x_continuous(expand = c(0.009, 0)) + \n  scale_y_continuous(expand = c(0.01, 0)) +\n  facet_wrap(~c, nrow = 3, labeller = label_glue('Male mating investment (c): {c}')) +\n  theme_bw() +\n  theme(text = element_text(size = 14),\n        strip.background = element_rect(fill = \"Aliceblue\", linewidth = .5))"
  },
  {
    "objectID": "index.html#plotting-sexual-and-intragenomic-conflicts",
    "href": "index.html#plotting-sexual-and-intragenomic-conflicts",
    "title": "When not to avoid inbreeding: a gene’s eye view perspective",
    "section": "Plotting sexual and intragenomic conflicts",
    "text": "Plotting sexual and intragenomic conflicts\n\n\nCode\nresolution &lt;- 200\n\nparameters &lt;- \n  expand_grid(\n    r = seq(0, 1, length = resolution),\n    a = c(0, 0.5, 1),\n    c = c(0, 0.25, 0.5, 0.75, 1),\n    D = seq(0, 1, length = resolution)) # D represents inbreeding depression)\n\nresults &lt;-\n  parameters %&gt;% \n  mutate(female_inbreeding_fitness = (1-D) + (r*a*(1-D)) - (r*a*c),\n         male_inbreeding_fitness = (1-D) + r*a*(1-D) - c,\n         female_outbreeding_fitness = 1,\n         male_outbreeding_fitness = r*a,\n         female_fitness_contrast = female_inbreeding_fitness - female_outbreeding_fitness,\n         male_fitness_contrast = male_inbreeding_fitness - male_outbreeding_fitness)\n\n\n\nWhen is inbreeding favoured in each sex?\nIn the figure below, the dashed lines indicate the level of inbreeding depression that can be tolerated for a given value of \\(r\\). The plot is split into panels by \\(c\\), the cost of mating for males relative to females and \\(a\\), the probability that a locus present in one sex is also present in the gametes produced by the other.\n\n\nCode\npal1 &lt;- met.brewer(\"OKeeffe1\", n=100, direction = -1)\npal2 &lt;- met.brewer(\"Hiroshige\", n=50, direction = -1)\n#pal2 &lt;- moma.colors(\"Avedon\", n = 50, direction = 1)\n  \nFemale_plot &lt;-\n  results %&gt;%\n  filter(c != 0.25, c != 0.75, c != 1) %&gt;% \n  ggplot(aes(x = r, y = D)) +\n  geom_blank() +\n  geom_raster(aes(fill = female_fitness_contrast)) + \n  stat_contour(aes(z = female_fitness_contrast*100), colour = \"black\", binwidth = 25,\n               breaks = c(-125, -100, -75, -50, -25, 25, 50, 75, 100, 125)) +\n  stat_contour(aes(z = female_fitness_contrast*100), colour = \"black\", breaks = 0,\n               linetype = 2) +\n  #geom_line(data = female_inbreeding_equilibria, aes(x = r, y = D),\n   #         linetype = 3, alpha = 0.5) +\n  scale_fill_gradientn(colours = pal1, breaks = c(-1.5, -0.75, 0, 0.75, 1.5), limits = c(-2, 2)) +\n  facet_wrap(c ~ a, \n             scales = \"free\", nrow = 2, strip.position = c(\"top\"),\n             labeller = label_glue('c = {`c`}, a = {`a`}')) +\n  labs(x = '_r_, the relatedness coefficient',\n       y = ~delta~'(inbreeding depression)',\n       fill = \"Inbreeding fitness\",\n       title = \"A. Alleles present in females\") +\n  scale_x_continuous(expand = c(0, 0)) + \n  scale_y_continuous(expand = c(0, 0)) + # labels = c(0, 25, 50, 75, 90)) +\n  theme(panel.border = element_rect(fill = NA, colour = \"black\", linewidth = .8),\n        strip.background = element_rect(colour = \"black\", fill = \"Aliceblue\", linewidth = .8),\n        axis.title.x = element_markdown(),\n        plot.title = element_text(hjust = 0.5))\n\n\nMale_plot &lt;-\n  results %&gt;%\n  filter(c != 0.25, c != 0.75, c != 1) %&gt;% \n  ggplot(aes(x = r, y = D)) +\n  geom_blank() +\n  geom_raster(aes(fill = male_fitness_contrast)) + \n  stat_contour(aes(z = male_fitness_contrast*100), colour = \"black\", binwidth = 25,\n              breaks = c(-125, -100, -75, -50, -25, 25, 50, 75, 100, 125)) +\n  stat_contour(aes(z = male_fitness_contrast*100), colour = \"black\", breaks = 0,\n               linetype = 2) +\n  #geom_line(data = female_inbreeding_equilibria, aes(x = r, y = D),\n   #         linetype = 3, alpha = 0.5) +\n  scale_fill_gradientn(colours = pal1, breaks = c(-1.5, -0.75, 0, 0.75, 1.5), limits = c(-2, 2)) +\n  facet_wrap(c ~ a, \n             scales = \"free\", nrow = 2, strip.position = c(\"top\"),\n             labeller = label_glue('c = {`c`}, a = {`a`}')) +\n  labs(x = '_r_, the relatedness coefficient',\n       y = ~delta~'(inbreeding depression)',\n       fill = \"Inbreeding fitness\",\n       title = \"B. Alleles present in males\") +\n  scale_x_continuous(expand = c(0, 0)) + \n  scale_y_continuous(expand = c(0, 0)) + # labels = c(0, 25, 50, 75, 90)) +\n  theme(panel.border = element_rect(fill = NA, colour = \"black\", linewidth = .8),\n        strip.background = element_rect(colour = \"black\", fill = \"Aliceblue\", linewidth = .8),\n        axis.title.x = element_markdown(),\n        plot.title = element_text(hjust = 0.5))\n\nFemale_plot\n\n\n\n\n\nCode\nMale_plot\n\n\n\n\n\n\n\nWhen is there intragenomic conflict over inbreeding?\nThese panels show the parameter space where conflict is expected between alleles on different chromosomes. We find that intragenomic conflict over inbreeding is sex, chromosome and mating system (approximated by \\(c\\)) specific.\n\n\nCode\nIntragenomic_conflict_females &lt;-\n  results %&gt;%\n  select(1:4, female_fitness_contrast) %&gt;%\n  pivot_wider(names_from = a, values_from = female_fitness_contrast) %&gt;% \n  mutate(`Autosomal - X-linked` = `1` - `0.5`,\n         `Autosomal - Z-linked` = 0,\n         `Autosomal - W-linked & Z-linked - W-linked` = `1` - `0`) %&gt;% \n  pivot_longer(cols = contains(\"-\"), names_to = \"contrast\", values_to = \"intragenomic_conflict\") %&gt;% \n  mutate(relationship = case_when(\n    contrast == \"Autosomal - X-linked\" & `1` &gt; 0 & `0.5` &gt; 0 ~\n      \"Inbreeding favoured at both loci\",\n    contrast == \"Autosomal - X-linked\" & `1` &lt; 0 & `0.5` &lt; 0 ~\n       \"Inbreeding deleterious at both loci\",\n    \n    contrast == \"Autosomal - Z-linked\" & `1` &gt; 0 ~\n      \"Inbreeding favoured at both loci\",\n    contrast == \"Autosomal - Z-linked\" & `1` &lt; 0 ~\n       \"Inbreeding deleterious at both loci\",\n    \n    contrast == \"Autosomal - W-linked & Z-linked - W-linked\" & `1` &gt; 0 & `0` &gt; 0 ~\n      \"Inbreeding favoured at both loci\",\n    contrast == \"Autosomal - W-linked & Z-linked - W-linked\" & `1` &lt; 0 & `0` &lt; 0 ~\n       \"Inbreeding deleterious at both loci\",\n    `0` == 0 & `0.5` == 0 & `1` == 0 ~ \"Inbreeding deleterious at both loci\",  \n    .default = \"Intragenomic conflict\")) %&gt;% \n  mutate(contrast = fct_relevel(contrast, \"Autosomal - X-linked\", \"Autosomal - Z-linked\",\n                                \"Autosomal - W-linked & Z-linked - W-linked\")) %&gt;% \n  filter(c != 1, c != 0.75, c != 0.25)  # remove if we want more c values\n\nIntragenomic_conflict_males &lt;-\n  results %&gt;%\n  select(1:4, male_fitness_contrast) %&gt;%\n  pivot_wider(names_from = a, values_from = male_fitness_contrast) %&gt;% \n  mutate(`Autosomal - X-linked` = 0,\n         `Autosomal - Z-linked` = `1` - `0.5`,\n         `Autosomal - Y-linked & X-linked - Y-linked` = `1` - `0`) %&gt;% \n  pivot_longer(cols = contains(\"-\"), names_to = \"contrast\", values_to = \"intragenomic_conflict\") %&gt;% \n  mutate(relationship = case_when(\n    contrast == \"Autosomal - X-linked\" & `1` &gt; 0 ~\n      \"Inbreeding favoured at both loci\",\n    contrast == \"Autosomal - X-linked\" & `1` &lt; 0 ~\n       \"Inbreeding deleterious at both loci\",\n    \n    contrast == \"Autosomal - Z-linked\" & `1` &gt; 0 & `0.5` &gt; 0 ~\n      \"Inbreeding favoured at both loci\",\n    contrast == \"Autosomal - Z-linked\" & `1` &lt; 0 & `0.5` &lt; 0 ~\n       \"Inbreeding deleterious at both loci\",\n    \n    contrast == \"Autosomal - Y-linked & X-linked - Y-linked\" & `1` &gt; 0 & `0` &gt; 0 ~\n      \"Inbreeding favoured at both loci\",\n    contrast == \"Autosomal - Y-linked & X-linked - Y-linked\" & `1` &lt; 0 & `0` &lt; 0 ~\n       \"Inbreeding deleterious at both loci\",\n    `0` == 0 & `0.5` == 0 & `1` == 0 ~ \"Inbreeding deleterious at both loci\",  \n    .default = \"Intragenomic conflict\")) %&gt;% \n    mutate(contrast = fct_relevel(contrast, \"Autosomal - X-linked\", \"Autosomal - Z-linked\",\n                                \"Autosomal - Y-linked & X-linked - Y-linked\")) %&gt;% \n  filter(c != 1, c != 0.75, c != 0.25) # remove if we want more c values\n    \n\nmake_genomic_conflict_plot &lt;- \n  function(data, enter_title){\n    data %&gt;% \n      ggplot(aes(x = r, y = D)) +\n      geom_blank() +\n      geom_tile(data = data %&gt;% filter(relationship == \"Intragenomic conflict\"),\n                aes(fill = intragenomic_conflict)) + \n      scale_fill_gradientn(colours = pal2, limits = c(-1.2, 1.1), #na.value = \"white\",\n                           labels = c(\"Strong conflict\", -0.5, 0, 0.5, \"Strong conflict\")) +\n      labs(fill = \"Intragenomic conflict\") +\n      new_scale_fill() +\n      geom_tile(data = data %&gt;% filter(relationship != \"Intragenomic conflict\"),\n                aes(fill = relationship), alpha = 0.75) +\n     # stat_contour(data = data %&gt;% filter(relationship == \"Intragenomic conflict\"),\n      #             aes(z = intragenomic_conflict), colour = \"black\",\n       #     breaks = c(-.10, -.20, -.30, -.40, -.50, -.60, -.70, -.80, -.90, -.100,\n        #               .10, .20, .30, .40, .50, .60, .70, .80, .90, .100),\n         #   upright = TRUE) +\n      #stat_contour(aes(z = intragenomic_conflict*100), colour = \"black\", breaks = 0,\n       #    linetype = 2) +\n      scale_fill_manual(values = c(\"#fbe6c5\", \"#d2fbd4\"), \n                                   labels = c(\"Inbreeding deleterious at both loci\", \n                                              \"Inbreeding favoured at both loci\")) +\n      facet_wrap(contrast~c, nrow = 3,\n                 scales = \"free\", strip.position = c(\"top\"),\n                 labeller = label_glue('{`contrast`}\\nc = {`c`}')) +\n      labs(x = '_r_, the relatedness coefficient',\n           y = ~delta~'(inbreeding depression)',\n           fill = \"Evolutionary concordance\",\n           title = enter_title) +\n      scale_x_continuous(expand = c(0, 0)) + \n      scale_y_continuous(expand = c(0, 0)) + # labels = c(0, 25, 50, 75, 90)) +\n      theme(panel.border = element_rect(fill = NA, colour = \"black\", size = .8),\n            panel.grid.minor = element_blank(),\n            strip.background = element_rect(colour = \"black\", fill = \"Aliceblue\", linewidth = .8),\n            axis.title.x = element_markdown(),\n            plot.title = element_text(hjust = 0.5))\n  }\n\nicf &lt;- make_genomic_conflict_plot(Intragenomic_conflict_females, \"A. Intragenomic conflict in females\")\nicm &lt;- make_genomic_conflict_plot(Intragenomic_conflict_males, \"B. Intragenomic conflict in males\")\n\nicf\n\n\n\n\n\nCode\nicm #+ plot_layout(guides = \"collect\")\n\n\n\n\n\n\n\nWhen is there sexual conflict over inbreeding?\nThese panels show where loci are expected to be under intralocus sexual conflict over inbreeding preference. In regions of sexual conflict, inbreeding preference is always favoured in males, but has negative fitness consequences if expressed by females (assuming that males invest less into mating than females).\n\n\nCode\nautosomal_data &lt;-\n  results %&gt;%\n  filter(a == 1, c != 1, c != 0.25) %&gt;% \n  mutate(sexual_conflict = male_fitness_contrast - female_fitness_contrast) %&gt;%\n  mutate(relationship = \n           case_when(female_fitness_contrast &lt; 0 & male_fitness_contrast &gt; 0 \n                     ~ \"Sexual conflict\",\n                     female_fitness_contrast &lt; 0 & male_fitness_contrast &lt; 0 \n                     ~ \"Inbreeding deleterious at both loci\",\n                     female_fitness_contrast &gt; 0 & male_fitness_contrast &gt; 0 \n                     ~ \"Inbreeding favoured at both loci\"),\n         Location = \"Autosomal\") \n  \n\n\nX_data &lt;- \n  results %&gt;% \n  filter(a == 0.5, c != 1, c != 0.25) %&gt;%  \n  select(1:4, contains(\"female\")) %&gt;% \n  rename(a_female = a) %&gt;% # this step makes the join work as intended\n  left_join(\n    results %&gt;% \n      filter(a == 1, c != 1, c != 0.25) %&gt;% \n      select(1:4, starts_with(\"male\")) %&gt;% \n      rename(a_male = a) # this step makes the join work as intended\n  ) %&gt;%\n  mutate(sexual_conflict = male_fitness_contrast - female_fitness_contrast) %&gt;% \n  mutate(relationship = \n           case_when(female_fitness_contrast &lt; 0 & male_fitness_contrast &gt; 0 \n                     ~ \"Sexual conflict\",\n                     female_fitness_contrast &lt; 0 & male_fitness_contrast &lt; 0 \n                     ~ \"Inbreeding deleterious at both loci\",\n                     female_fitness_contrast &gt; 0 & male_fitness_contrast &gt; 0 \n                     ~ \"Inbreeding favoured at both loci\"),\n         Location = \"X-linked\")\n\nZ_data &lt;-\n  results %&gt;% \n  filter(a == 1, c != 1, c != 0.25) %&gt;%  \n  select(1:4, contains(\"female\")) %&gt;% \n  rename(a_female = a) %&gt;% \n  left_join(\n    results %&gt;% \n      filter(a == 0.5, c != 1, c != 0.25) %&gt;% \n      select(1:4, starts_with(\"male\")) %&gt;% \n      rename(a_male = a)\n  ) %&gt;% \n  mutate(sexual_conflict = male_fitness_contrast - female_fitness_contrast) %&gt;%\n  mutate(relationship = \n           case_when(female_fitness_contrast &lt; 0 & male_fitness_contrast &gt; 0 \n                     ~ \"Sexual conflict\",\n                     female_fitness_contrast &lt; 0 & male_fitness_contrast &lt; 0 \n                     ~ \"Inbreeding deleterious at both loci\",\n                     female_fitness_contrast &gt; 0 & male_fitness_contrast &gt; 0 \n                     ~ \"Inbreeding favoured at both loci\"),\n         Location = \"Z-linked\")\n\nplotting_data &lt;- bind_rows(autosomal_data, X_data, Z_data)\n\nSexual_conflict_plot &lt;-\n  plotting_data %&gt;%\n  ggplot(aes(x = r, y = D)) +\n  geom_blank() +\n  geom_tile(data = plotting_data %&gt;% filter(relationship == \"Sexual conflict\"),\n            aes(fill = sexual_conflict)) + \n  scale_fill_gradientn(colours = pal2, limits = c(-1.2, 1.1), #na.value = \"white\",\n                       labels = c(\"Strong conflict, female (+)\", -0.5, \n                                  \"No conflict\", 0.5, \"Strong conflict, male (+)\")) +\n  labs(fill = \"Sexual conflict\") +\n  new_scale_fill() +\n  geom_tile(data = plotting_data %&gt;% filter(relationship != \"Sexual conflict\"),\n            aes(fill = relationship), alpha = 0.75) +\n  scale_fill_manual(values = c(\"#fbe6c5\", \"#d2fbd4\"), \n                    labels = c(\"Inbreeding deleterious at both loci\", \n                               \"Inbreeding favoured at both loci\")) +\n  facet_wrap(Location~c, nrow = 3,\n             scales = \"free\", strip.position = c(\"top\"),\n             labeller = label_glue('{`Location`}, c = {`c`}')) +\n  labs(x = '_r_, the relatedness coefficient',\n       y = ~delta~'(inbreeding depression)',\n       fill = \"Intensity of\\nsexual conflict\") +\n  scale_x_continuous(expand = c(0, 0)) + \n  scale_y_continuous(expand = c(0, 0)) + # labels = c(0, 25, 50, 75, 90)) +\n  theme(panel.border = element_rect(fill = NA, colour = \"black\", size = .8),\n        strip.background = element_rect(colour = \"black\", fill = \"Aliceblue\", linewidth = .8),\n        axis.title.x = element_markdown())\n  \nSexual_conflict_plot"
  },
  {
    "objectID": "index.html#build-a-mating-table",
    "href": "index.html#build-a-mating-table",
    "title": "When not to avoid inbreeding: a gene’s eye view perspective",
    "section": "Build a mating table",
    "text": "Build a mating table\nSomething to think about is how we set genetics to affect the expression of inbreeding tolerance/preference. Things that matter include:\n\ndo we consider inbreeding expression as the additive result of multiple loci on different chromosomes, or do we consider each case separately.\nis inbreeding expression binary, a threshold trait or a quantitative, normally distributed trait. The latter would allow us to model evolution towards some maximum. The former cases are simpler to code (particularly the first case) but still allow us to answer a very similar question.\n\n\n\nCode\nmake_mating_table &lt;- function(architecture){\n  \n  make_offspring &lt;- function(X, Y, type, zygote_freq, architecture){\n    tibble(Female_genotype = X,\n           Male_genotype = Y,\n           type,\n           zygote_freq,\n           locus_type = architecture)\n  }\n  \n  \n  # Set up the  possible mating duo types\n  \n  #mating_types &lt;- \n   # bind_rows(\n      # autosomal\n    #  expand_grid(\n     #   mother = c(\"A_IA_I.Female\",\n      #             \"A_IA_O.Female\",\n       #            \"A_OA_O.Female\"),\n        #father = c(\"A_IA_I.Male\",\n         #          \"A_IA_O.Male\",\n          #         \"A_OA_O.Male\")) %&gt;% \n        #mutate(locus_type = \"autosomal\"),\n      # XY (both can encode inbreeding but they're expressed independently)\n      #expand_grid(\n       # mother = c(\"X_IX_I.Female\",\n        #           \"X_IX_O.Female\",\n         #          \"X_OX_O.Female\"),\n        #father = c(\"X_IY_I.Male\",\n         #          \"X_IY_O.Male\",\n          #         \"X_OY_I.Male\",\n           #        \"X_OY_O.Male\")) %&gt;% \n        #mutate(locus_type = \"XY\"),\n      # ZW (as per the XY case)\n     # expand_grid(\n      #  mother = c(\"Z_IW_I.Female\",\n       #            \"Z_IW_O.Female\",\n        #           \"Z_OW_I.Female\",\n         #          \"Z_OW_O.Female\"),\n        #father = c(\"Z_IZ_I.Male\",\n         #          \"Z_IZ_O.Male\",\n          #         \"Z_OZ_O.Male\")) %&gt;% \n        #mutate(locus_type = \"ZW\"),\n      # cytoplasmic\n      #expand_grid(\n       # mother = c(\"C_I.Female\",\n        #           \"C_O.Female\"),\n        #father = c(\"C_I.Male\",\n         #          \"C_O.Male\")) %&gt;% \n        #mutate(locus_type = \"cytoplasmic\")\n    #) %&gt;% \n    #mutate(locus_type = architecture)\n  \n  # Specify the possible offspring genotypes for all the potential crosses; we use these for the type argument in the make_offspring function\n  \n  # autosomal\n  \n  # II x II\n  \n  a_genotype_1 &lt;- c(\"A_IA_I.Female\", \"A_IA_I.Male\")\n  \n  # II x IO\n  \n  a_genotype_2 &lt;- c(\"A_IA_I.Female\", \"A_IA_I.Male\", \n                    \"A_IA_O.Female\", \"A_IA_O.Male\")\n  \n  # II x OO\n  \n  a_genotype_3 &lt;- c(\"A_IA_O.Female\", \"A_IA_O.Male\")\n  \n  # IO x IO\n  \n  a_genotype_4 &lt;- c(\"A_IA_I.Female\", \"A_IA_I.Male\", \n                    \"A_IA_O.Female\", \"A_IA_O.Male\", \n                    \"A_OA_O.Female\", \"A_OA_O.Male\")\n  \n  # IO x OO\n  \n  a_genotype_5 &lt;- c(\"A_IA_O.Female\", \"A_IA_O.Male\",\n                    \"A_OA_O.Female\", \"A_OA_O.Male\")\n  \n  # OO x OO\n  \n  a_genotype_6 &lt;- c(\"A_OA_O.Female\", \"A_OA_O.Male\")\n  \n  # XY\n  \n  \n  # II x IY_I\n  \n  xy_genotype_1 &lt;- c(\"X_IX_I.Female\", \"X_IY_I.Male\")\n  \n  # II x IY_O\n  \n  xy_genotype_2 &lt;- c(\"X_IX_I.Female\", \"X_IY_O.Male\")\n  \n  # II x OY_I\n  \n  xy_genotype_3 &lt;- c(\"X_IX_O.Female\", \"X_IY_I.Male\")\n  \n  # II x OY_O\n  \n  xy_genotype_4 &lt;- c(\"X_IX_O.Female\", \"X_IY_O.Male\")\n  \n  # IO x IY_I\n  \n  xy_genotype_5 &lt;- c(\"X_IX_I.Female\", \"X_IY_I.Male\",\n                     \"X_IX_O.Female\", \"X_OY_I.Male\")\n  \n  # IO x IY_O\n  \n  xy_genotype_6 &lt;- c(\"X_IX_I.Female\", \"X_IX_O.Female\", \n                     \"X_IY_O.Male\", \"X_OY_O.Male\")\n  \n  # IO x OY_I\n  \n  xy_genotype_7 &lt;- c(\"X_IX_O.Female\", \"X_IY_I.Male\",\n                     \"X_OX_O.Female\", \"X_OY_I.Male\")\n  \n  # IO x OY_O\n  \n  xy_genotype_8 &lt;- c(\"X_IX_O.Female\", \"X_IY_O.Male\",\n                     \"X_OX_O.Female\", \"X_OY_O.Male\")\n  \n  # OO x IY_I\n  \n  xy_genotype_9 &lt;- c(\"X_IX_O.Female\", \"X_OY_I.Male\")\n  \n  # OO x IY_O\n  \n  xy_genotype_10 &lt;- c(\"X_IX_O.Female\", \"X_OY_O.Male\")\n  \n  # OO x OY_I\n  \n  xy_genotype_11 &lt;- c(\"X_OX_O.Female\", \"X_OY_I.Male\")\n  \n  # OO x OY_O\n  \n  xy_genotype_12 &lt;- c(\"X_OX_O.Female\", \"X_OY_O.Male\")\n  \n  # ZW\n  \n  # IW_I x II\n  \n  zw_genotype_1 &lt;- c(\"Z_IW_I.Female\", \"Z_IZ_I.Male\")\n  \n  # IW_I x IO\n  \n  zw_genotype_2 &lt;- c(\"Z_IW_I.Female\", \"Z_IZ_I.Male\", \n                     \"Z_OW_I.Female\", \"Z_IZ_O.Male\")\n  \n  # IW_I x OO\n  \n  zw_genotype_3 &lt;- c(\"Z_OW_I.Female\", \"Z_IZ_O.Male\")\n  \n  # IW_O x II\n  \n  zw_genotype_4 &lt;- c(\"Z_IZ_I.Male\", \"Z_IW_O.Female\")\n  \n  # IW_O x IO\n  \n  zw_genotype_5 &lt;- c(\"Z_IZ_I.Male\",\n                     \"Z_IW_O.Female\", \"Z_IZ_O.Male\", \n                     \"Z_OW_O.Female\")\n  \n  # IW_O x OO\n  \n  zw_genotype_6 &lt;- c(\"Z_IZ_O.Male\", \"Z_OW_O.Female\")\n  \n  # OW_I X II\n  \n  zw_genotype_7 &lt;- c(\"Z_IW_I.Female\", \"Z_IZ_O.Male\")\n  \n  # OW_I x IO\n  \n  zw_genotype_8 &lt;- c(\"Z_IW_I.Female\", \"Z_IZ_O.Male\", \n                     \"Z_OW_I.Female\", \"Z_OZ_O.Male\")\n  \n  # OW_I x OO\n  \n  zw_genotype_9 &lt;- c(\"Z_OW_I.Female\", \"Z_OZ_O.Male\")\n  \n  # OW_O X II\n  \n  zw_genotype_10 &lt;- c(\"Z_IW_O.Female\", \"Z_IZ_O.Male\")\n  \n  # OW_O x IO\n  \n  zw_genotype_11 &lt;- c(\"Z_IW_O.Female\", \"Z_IZ_O.Male\", \n                      \"Z_OW_O.Female\", \"Z_OZ_O.Male\")\n  \n  # OW_O x OO\n  \n  zw_genotype_12 &lt;- c(\"Z_OW_O.Female\", \"Z_OZ_O.Male\")\n  \n  # cytoplasmic\n  \n  # I x I\n  # I x O\n  \n  c_genotype_1 &lt;- c(\"C_I.Female\", \"C_I.Male\")\n  \n  # O x O\n  # O x I\n  \n  c_genotype_2 &lt;- c(\"C_O.Female\", \"C_O.Male\")\n  \n  \n  \n  # Now calculate the zygote frequencies for each cross\n  \n  # autosomal\n  \n  # even frequency of two offspring genotypes\n  \n  freq_2 &lt;- rep(0.5, 2)\n  \n  # even frequency between four offspring types\n  \n  freq_4 &lt;- rep(0.25, 4)\n  \n  # when there are 6 offspring genotypes\n  \n  freq_6 &lt;- c(0.125, 0.125,\n              0.25, 0.25,\n              0.125, 0.125)\n  \n  bind_rows(\n    list(\n      make_offspring(\"A_IA_I\", \"A_IA_I\", a_genotype_1, freq_2, \"autosomal\"),\n      make_offspring(\"A_IA_I\", \"A_IA_O\", a_genotype_2, freq_4, \"autosomal\"),\n      make_offspring(\"A_IA_I\", \"A_OA_O\", a_genotype_3, freq_2, \"autosomal\"),\n      make_offspring(\"A_IA_O\", \"A_IA_I\", a_genotype_2, freq_4, \"autosomal\"),\n      make_offspring(\"A_IA_O\", \"A_IA_O\", a_genotype_4, freq_6, \"autosomal\"),\n      make_offspring(\"A_IA_O\", \"A_OA_O\", a_genotype_5, freq_4, \"autosomal\"),\n      make_offspring(\"A_OA_O\", \"A_IA_I\", a_genotype_3, freq_2, \"autosomal\"),\n      make_offspring(\"A_OA_O\", \"A_IA_O\", a_genotype_5, freq_4, \"autosomal\"),\n      make_offspring(\"A_OA_O\", \"A_OA_O\", a_genotype_6, freq_2, \"autosomal\"),\n      \n      make_offspring(\"X_IX_I\", \"X_IY_I\", xy_genotype_1, freq_2, \"XY\"),\n      make_offspring(\"X_IX_I\", \"X_IY_O\", xy_genotype_2, freq_2, \"XY\"),\n      make_offspring(\"X_IX_I\", \"X_OY_I\", xy_genotype_3, freq_2, \"XY\"),\n      make_offspring(\"X_IX_I\", \"X_OY_O\", xy_genotype_4, freq_2, \"XY\"),\n      make_offspring(\"X_IX_O\", \"X_IY_I\", xy_genotype_5, freq_4, \"XY\"),\n      make_offspring(\"X_IX_O\", \"X_IY_O\", xy_genotype_6, freq_4, \"XY\"),\n      make_offspring(\"X_IX_O\", \"X_OY_I\", xy_genotype_7, freq_4, \"XY\"),\n      make_offspring(\"X_IX_O\", \"X_OY_O\", xy_genotype_8, freq_4, \"XY\"),\n      make_offspring(\"X_OX_O\", \"X_IY_I\", xy_genotype_9, freq_2, \"XY\"),\n      make_offspring(\"X_OX_O\", \"X_IY_O\", xy_genotype_10, freq_2, \"XY\"),\n      make_offspring(\"X_OX_O\", \"X_OY_I\", xy_genotype_11, freq_2, \"XY\"),\n      make_offspring(\"X_OX_O\", \"X_OY_O\", xy_genotype_12, freq_2, \"XY\"),\n      \n      make_offspring(\"Z_IW_I\", \"Z_IZ_I\", zw_genotype_1, freq_2, \"ZW\"),\n      make_offspring(\"Z_IW_I\", \"Z_IZ_O\", zw_genotype_2, freq_4, \"ZW\"),\n      make_offspring(\"Z_IW_I\", \"Z_OZ_O\", zw_genotype_3, freq_2, \"ZW\"),\n      make_offspring(\"Z_IW_O\", \"Z_IZ_I\", zw_genotype_4, freq_2, \"ZW\"),\n      make_offspring(\"Z_IW_O\", \"Z_IZ_O\", zw_genotype_5, freq_4, \"ZW\"),\n      make_offspring(\"Z_IW_O\", \"Z_OZ_O\", zw_genotype_6, freq_2, \"ZW\"),\n      make_offspring(\"Z_OW_O\", \"Z_IZ_I\", zw_genotype_7, freq_2, \"ZW\"),\n      make_offspring(\"Z_OW_O\", \"Z_IZ_O\", zw_genotype_8, freq_4, \"ZW\"),\n      make_offspring(\"Z_OW_O\", \"Z_OZ_O\", zw_genotype_9, freq_2, \"ZW\"),\n      make_offspring(\"Z_OW_O\", \"Z_OZ_O\", zw_genotype_10, freq_2, \"ZW\"),\n      make_offspring(\"Z_OW_O\", \"Z_OZ_O\", zw_genotype_11, freq_4, \"ZW\"),\n      make_offspring(\"Z_OW_O\", \"Z_OZ_O\", zw_genotype_12, freq_2, \"ZW\"),\n      \n      make_offspring(\"C_I\", \"CI\", c_genotype_1, freq_2, \"cytoplasmic\"),\n      make_offspring(\"C_I\", \"CO\", c_genotype_1, freq_2, \"cytoplasmic\"),\n      make_offspring(\"C_O\", \"CI\", c_genotype_2, freq_2, \"cytoplasmic\"),\n      make_offspring(\"C_O\", \"CO\", c_genotype_2, freq_2, \"cytoplasmic\")\n    )) %&gt;% \n    filter(locus_type == architecture)\n}\n\n\nAn example of the mating table, for an autosomal locus\n\n\nCode\nmake_mating_table(\"autosomal\") %&gt;% \n  rename(zygote_type = type) %&gt;% \n  kable() %&gt;% \n  kable_styling() %&gt;% \n  scroll_box(height = \"500px\")\n\n\n\n\n\n\nFemale_genotype\nMale_genotype\nzygote_type\nzygote_freq\nlocus_type\n\n\n\n\nA_IA_I\nA_IA_I\nA_IA_I.Female\n0.500\nautosomal\n\n\nA_IA_I\nA_IA_I\nA_IA_I.Male\n0.500\nautosomal\n\n\nA_IA_I\nA_IA_O\nA_IA_I.Female\n0.250\nautosomal\n\n\nA_IA_I\nA_IA_O\nA_IA_I.Male\n0.250\nautosomal\n\n\nA_IA_I\nA_IA_O\nA_IA_O.Female\n0.250\nautosomal\n\n\nA_IA_I\nA_IA_O\nA_IA_O.Male\n0.250\nautosomal\n\n\nA_IA_I\nA_OA_O\nA_IA_O.Female\n0.500\nautosomal\n\n\nA_IA_I\nA_OA_O\nA_IA_O.Male\n0.500\nautosomal\n\n\nA_IA_O\nA_IA_I\nA_IA_I.Female\n0.250\nautosomal\n\n\nA_IA_O\nA_IA_I\nA_IA_I.Male\n0.250\nautosomal\n\n\nA_IA_O\nA_IA_I\nA_IA_O.Female\n0.250\nautosomal\n\n\nA_IA_O\nA_IA_I\nA_IA_O.Male\n0.250\nautosomal\n\n\nA_IA_O\nA_IA_O\nA_IA_I.Female\n0.125\nautosomal\n\n\nA_IA_O\nA_IA_O\nA_IA_I.Male\n0.125\nautosomal\n\n\nA_IA_O\nA_IA_O\nA_IA_O.Female\n0.250\nautosomal\n\n\nA_IA_O\nA_IA_O\nA_IA_O.Male\n0.250\nautosomal\n\n\nA_IA_O\nA_IA_O\nA_OA_O.Female\n0.125\nautosomal\n\n\nA_IA_O\nA_IA_O\nA_OA_O.Male\n0.125\nautosomal\n\n\nA_IA_O\nA_OA_O\nA_IA_O.Female\n0.250\nautosomal\n\n\nA_IA_O\nA_OA_O\nA_IA_O.Male\n0.250\nautosomal\n\n\nA_IA_O\nA_OA_O\nA_OA_O.Female\n0.250\nautosomal\n\n\nA_IA_O\nA_OA_O\nA_OA_O.Male\n0.250\nautosomal\n\n\nA_OA_O\nA_IA_I\nA_IA_O.Female\n0.500\nautosomal\n\n\nA_OA_O\nA_IA_I\nA_IA_O.Male\n0.500\nautosomal\n\n\nA_OA_O\nA_IA_O\nA_IA_O.Female\n0.250\nautosomal\n\n\nA_OA_O\nA_IA_O\nA_IA_O.Male\n0.250\nautosomal\n\n\nA_OA_O\nA_IA_O\nA_OA_O.Female\n0.250\nautosomal\n\n\nA_OA_O\nA_IA_O\nA_OA_O.Male\n0.250\nautosomal\n\n\nA_OA_O\nA_OA_O\nA_OA_O.Female\n0.500\nautosomal\n\n\nA_OA_O\nA_OA_O\nA_OA_O.Male\n0.500\nautosomal"
  },
  {
    "objectID": "index.html#create-the-starting-population",
    "href": "index.html#create-the-starting-population",
    "title": "When not to avoid inbreeding: a gene’s eye view perspective",
    "section": "Create the starting population",
    "text": "Create the starting population\nFollowing Ekrem and Kokko (2023), we find the reproductive lifespans of N diploid individuals in a sexually reproducing population to initialise the simulation. Mortality events are drawn from an exponential distribution with \\(\\mu_F\\) and \\(\\mu_M\\) for females (female_death_rate) and males (male_death_rate) respectively. The chance of mortality is therefore constant across the reproductive lifespan for each sex. \\(\\mu_F = \\mu_M = 0.2\\) in the simulation run documented here.\nEach individual possesses an inbreeding locus with two possible alleles. The A_1 allele encodes inbreeding avoidance, whereas the A_2 allele encodes inbreeding tolerance. We assume that the invading A_2 allele is dominant, such that any individuals carrying the allele express inbreeding tolerance (we can relax this assumption once I have it coded and working).\n\n\nCode\n# build the function to find individual lifespans\n\nbuild_starting_pop &lt;-\n  function(seed, pop_size, death_rate, Sex){\n    set.seed(seed)\n    # death times are drawn from an exponential distribution  \n    rexp(n = pop_size, rate = death_rate) %&gt;% \n      as_tibble() %&gt;%\n      rename(Lifespan = value) %&gt;% \n      mutate(alive = \"YES\",\n             Sex = Sex,\n             Enter_time = 0,\n             Mortality_time = round(Lifespan + Enter_time, 3),\n             Genotype = \"A_OA_O\")}\n  \n# code the initial mutational event (this is out of date but still helpful)\n\n#Females_mutation_event &lt;-\n # Females %&gt;% \n#  mutate(allele_1 = case_when(Individual_ID == sample_n(Female_lifespan, 1) %&gt;% pull(Individual_ID) ~ \"A_OA_I\",\n #                             .default = genotype))\n#Males_mutation_event &lt;-\n # Males %&gt;% \n#  mutate(allele_1 = case_when(Individual_ID == sample_n(Male_lifespan, 1) %&gt;% pull(Individual_ID) ~ \"A_OA_I\",\n  #                            .default = genotype))\n\n# this might work better\n\n#candidate_list &lt;- candidate_list %&gt;% mutate(mated = case_when(row_number() %in% c(1, 6) ~ \"YES\", .default = mated))"
  },
  {
    "objectID": "index.html#create-a-candidate-list-of-mating-events",
    "href": "index.html#create-a-candidate-list-of-mating-events",
    "title": "When not to avoid inbreeding: a gene’s eye view perspective",
    "section": "Create a candidate list of mating events",
    "text": "Create a candidate list of mating events\nWith individual reproductive lifespans known, we can then calculate time stamps for every possible female-male encounter for this set of individuals. For each focal male, the time to finding each specific female is drawn from a negative exponential distribution, with rate \\(\\frac{v}{N/2}\\). \\(v\\) represents the search efficiency of males in the population, where higher values indicate more efficient mate finding. The end result is a complete schedule of female-male interactions across the generation’s reproductive lifespan.\nHere, we set N=1000 and find the encounter time for the \\(500^2\\) possible female-male encounters.\n\\(v\\) is one of the parameters that we can vary to change the risk of an individual going unmated. Here, we create candidate lists of mating events where \\(v = 1\\), \\(v =10\\), \\(v = 100\\) and \\(v = 1000\\) (where v = 100 equates to a search efficiency equal to the rate of mortality when \\(N = 1000)\\).\n\n\nCode\ncandidate_timestamp_finder &lt;-\n  function(seed, Female_candidate_IDs, Male_candidate_IDs, encounters, v){\n    set.seed(seed)\n    expand_grid(Female_ID = Female_candidate_IDs,\n                Male_ID = Male_candidate_IDs) %&gt;% \n      bind_cols(\n        rexp(n = encounters, rate = (v/(Female_pop_size))) %&gt;%\n          as_tibble() %&gt;% \n          rename(Mate_encounter_time_stamp = value) %&gt;% \n          mutate(#v = as.factor(v),\n                 fitness = 1,\n                 mated = \"NO\",\n                 female_matings = 0,\n                 male_matings = 0)\n      ) \n  }\n\n#candidate_timestamp_finder(1, 1:4, 5:9, 20, 1)\n\n\nDeath triggers replacement by a new breeding individual, assuming that there is &gt;=1 successfully mated female in the population to produce this individual. If there are multiple mated females, the new individual is produced via a loaded lottery, where the probability of parentage is 1 / number of mated females, multiplied by the females relative direct fitness.\nThere is a carrying capacity version that adds a row whenever the population falls below carrying capacity. Currently, it’s commented out because it behaves strangely. Compare the two methods to see this weird behaviour."
  },
  {
    "objectID": "index.html#build-the-main-simulation-function",
    "href": "index.html#build-the-main-simulation-function",
    "title": "When not to avoid inbreeding: a gene’s eye view perspective",
    "section": "Build the main simulation function",
    "text": "Build the main simulation function\nUpdating the function\n\n\nCode\n# set parameters to build starting population\n\nStarting_pop_size &lt;- 10\n\nFemale_pop_size &lt;- Starting_pop_size*0.5\n\nMale_pop_size &lt;- Starting_pop_size*0.5\n\nFemale_death_rate &lt;- 0.2\n\nMale_death_rate &lt;- 0.2\n\n\n\n\nCode\n#IT NEARLY WORKS\n\n#Latest error: can't compute indices. A problem for tomorrow.\n\n# at 0.15 time it breaks...which is when two individuals are recruited at once.\n\ncontinuous_time_simulation(C = 2, v = 10, death_rate = 1, time_end = 0.15)\n\ncontinuous_time_simulation &lt;- function(C, \n                                       v,\n                                       death_rate,\n                                       time_end){\n  \n  # we need this so that t is correctly matched to Mortality_time\n  \n  tolerance &lt;- 0.005\n  \n  # Initialize the timer t to 0\n  t &lt;- 0\n  \n  # create the starting population\n  \n  starting_population &lt;- \n    build_starting_pop(seed = 1, pop_size = Female_pop_size, \n                       death_rate = death_rate, \"Female\") %&gt;% \n    bind_rows(build_starting_pop(seed = 2, pop_size = Male_pop_size, \n                                 death_rate = death_rate, \"Male\")) %&gt;% \n    mutate(Individual_ID = 1:n(),\n           time = 0,\n           matings = 0) %&gt;% \n    select(Individual_ID, Sex, Genotype, alive, Enter_time, Lifespan, Mortality_time, matings, time)\n  \n  # create sex specific tibbles that can be matched to the mating timestamps\n  \n  female_population &lt;-\n    starting_population %&gt;% \n    filter(Sex == \"Female\") %&gt;% \n    mutate(Female_ID = Individual_ID) %&gt;% \n    rename(Female_mortality_time = Mortality_time,\n           Female_alive = alive,\n           Female_genotype = Genotype)\n  \n  male_population &lt;-\n    starting_population %&gt;% \n    filter(Sex == \"Male\") %&gt;% \n    mutate(Male_ID = Individual_ID) %&gt;% \n    rename(Male_mortality_time = Mortality_time,\n           Male_alive = alive,\n           Male_genotype = Genotype)\n  \n  # Initialize the Individual_ID counter\n  \n  Individual_ID_counter &lt;- Starting_pop_size + 1\n  \n  # Create the initial candidate list of mating interactions\n  \n  initial_females &lt;- starting_population %&gt;% filter(Sex == \"Female\") %&gt;% pull(Individual_ID)\n  \n  initial_males &lt;- starting_population %&gt;% filter(Sex == \"Male\") %&gt;% pull(Individual_ID)\n  \n  candidate_list &lt;- \n    candidate_timestamp_finder(seed = 3,\n                               Female_candidate_IDs = initial_females,\n                               Male_candidate_IDs = initial_males,\n                               encounters = Female_pop_size*Male_pop_size,\n                               v = 10) %&gt;% \n    # join important genetic and life history info\n    left_join(female_population %&gt;% \n                select(Female_ID, Female_mortality_time, Female_alive, Female_genotype),\n              by = \"Female_ID\") %&gt;% \n    \n    left_join(male_population %&gt;% \n                select(Male_ID, Male_mortality_time, Male_alive, Male_genotype),\n              by = \"Male_ID\") %&gt;% \n    mutate(time = 0)\n  \n\n  # With the initial population and mating schedule ready to go, start the timer and let the simulation run.      In short, time progresses and events with predetermined time stamps occur. These events trigger new           actions which can lead to the production of new breeding individuals which have their own timeline of         predetermined events and interactions.\n\n  while (t &lt;= time_end) {\n    \n    # the simulation tracks the population via two dataframes. The first holds info about the individuals           in the population, while the second holds info on encounters between males and females in the                 population\n    \n    starting_population &lt;-\n      starting_population %&gt;%\n      # update the time and check if anyone dies\n      mutate(time = t,\n             alive = if_else(Mortality_time - time &lt;= tolerance, \"NO\", alive))\n    \n    # with the extant population determined, the next step is to determine if reproduction occurs and by         whom.\n    \n    # determine whether any female-male encounters result in mating\n    \n    candidate_list &lt;- candidate_list %&gt;%\n      #update the time and find the extant pop\n      mutate(time = t,\n             Female_alive = if_else(Female_mortality_time &lt;= time, \"NO\", Female_alive),\n             Male_alive = if_else(Male_mortality_time &lt;= time, \"NO\", Male_alive)) %&gt;%\n      # uncomment next line for testing - remove when happy\n      #mutate(mated = case_when(row_number() %in% c(1, 2, 11, 16) ~ \"YES\", .default = mated))\n      # determine whether mating occurs\n      mutate(mated = case_when(\n        # does the encounter happen\n        (Mate_encounter_time_stamp - time) &lt; tolerance &\n          Female_alive == \"YES\" &\n          Male_alive == \"YES\" &\n          # are both individuals receptive\n          female_matings == 0 &\n          male_matings &lt;= C ~ \"YES\",\n        .default = mated))\n    \n    # update the mating tally for each individual\n     \n    candidate_list &lt;- candidate_list %&gt;%\n      group_by(Female_ID) %&gt;% \n      mutate(female_matings = sum(mated != \"NO\")) %&gt;% \n      ungroup() %&gt;%\n      group_by(Male_ID) %&gt;% \n      mutate(male_matings = sum(mated != \"NO\")) %&gt;% \n      ungroup() \n    \n    # make sure two matings haven't taken place - this happens when a female is receptive and meets two males       at the same time. There is a rare occurrence but without this check and change it breaks the simulation\n    \n    if(nrow(candidate_list %&gt;% filter(female_matings &gt; 1)) &gt; 0){\n      \n      over_the_limit_female_matings &lt;- \n        candidate_list %&gt;% \n        filter(female_matings &gt; 1 & mated == \"YES\") %&gt;% \n        group_by(Female_ID) %&gt;% \n        sample_n(1) %&gt;% \n        mutate(mated = \"NO\") %&gt;% \n        ungroup()\n      \n      # remove impossible two places at once matings\n      \n      candidate_list &lt;- rows_update(candidate_list, over_the_limit_matings, by = c(\"Female_ID\", \"Male_ID\"))\n    }\n    \n    if(nrow(candidate_list %&gt;% filter(female_matings &gt; 1)) &gt; 0){\n      over_the_limit_male_matings &lt;-\n        candidate_list %&gt;% \n        filter(male_matings &gt; C & mated == \"YES\") %&gt;% \n        group_by(Male_ID) %&gt;% \n        sample_n(n() - C) %&gt;% \n        mutate(mated = \"NO\") %&gt;% \n        ungroup()\n      \n      # remove impossible two places at once matings\n      \n      candidate_list &lt;- rows_update(candidate_list, over_the_limit_matings, by = c(\"Female_ID\", \"Male_ID\"))\n      \n    }\n    \n     # re-update the mating tally for each individual\n    candidate_list &lt;- candidate_list %&gt;%\n      group_by(Female_ID) %&gt;% \n      mutate(female_matings = sum(mated != \"NO\")) %&gt;% \n      ungroup() %&gt;%\n      group_by(Male_ID) %&gt;% \n      mutate(male_matings = sum(mated != \"NO\")) %&gt;% \n      ungroup()\n    \n    # add mating tally to starting_population\n    starting_population &lt;-\n      rows_update(starting_population, \n                  \n                  candidate_list %&gt;% \n                    select(1:2, female_matings, male_matings) %&gt;%\n                    pivot_longer(cols = 1:2, values_to = \"Individual_ID\") %&gt;%\n                    distinct(Individual_ID, .keep_all = T) %&gt;% \n                    mutate(matings = case_when(name == \"Female_ID\" ~ female_matings,\n                                               name == \"Male_ID\" ~ male_matings)) %&gt;% \n                    select(Individual_ID, matings),\n                  by = \"Individual_ID\")\n      \n    \n    # check how many extant females have mated\n    \n    mated_pairs &lt;- length(which(candidate_list$mated == \"YES\" & candidate_list$Female_alive == \"YES\"))\n    \n    # Get the current population size \n    \n    current_pop_size &lt;- length(which(starting_population$alive == \"YES\"))\n    \n    # If the population is below carrying capacity and there are mated females ready to reproduce, start reproduction\n    \n    if (current_pop_size &lt; Starting_pop_size & mated_pairs &gt; 0) {\n      \n      # select mating pairs to produce offspring, weighted by fitness. Each pair can produce one offspring\n      \n      chosen_mating_pairs &lt;- \n        candidate_list %&gt;% \n        filter(mated == \"YES\" & Female_alive == \"YES\") %&gt;% \n        slice_sample(n = Starting_pop_size - current_pop_size, weight_by = fitness, replace = FALSE) %&gt;%\n        # change mating status for chosen pairs from \"YES\" to reproduced\n        mutate(mated = \"Reproduced\")\n      \n      # update the candidate list so that these pairs are not falsely chosen again (repro occurs once from     `   a mating)\n      \n      candidate_list &lt;- \n        rows_update(candidate_list, chosen_mating_pairs, by = c(\"Female_ID\", \"Male_ID\"))\n      \n      # get pertinent info for offspring - genotype, birth time, lifespan, mortality time \n      \n      new_recruits &lt;-\n        # use the mating table to find the offspring genotype produced by chosen mated pair\n        make_mating_table(\"autosomal\") %&gt;% \n        rename(zygote_type = type) %&gt;%\n        # filter the table to just the zygotes possible from the chosen pairs\n        inner_join(chosen_mating_pairs, relationship = \"many-to-many\") %&gt;% \n        # for each pair select a zygote genotype and sex, following Mendelian inheritance\n        group_by(Female_ID, Male_ID) %&gt;% \n        slice_sample(n = 1, weight_by = zygote_freq) %&gt;%\n        ungroup() %&gt;% \n        select(zygote_type) %&gt;% \n        separate_wider_delim(zygote_type, names = c(\"Genotype\", \"Sex\"), delim = \".\") %&gt;% \n        bind_cols(tibble(Individual_ID = Individual_ID_counter:(Individual_ID_counter + \n                                                        (Starting_pop_size - current_pop_size) - 1),\n               time = t,\n               Enter_time = time,\n               Lifespan = rexp(n = Starting_pop_size - current_pop_size, rate = death_rate),\n               alive = \"YES\",\n               Mortality_time = Enter_time + Lifespan,\n               matings = 0))\n      \n      \n       #tibble(Individual_ID = Individual_ID_counter:(Individual_ID_counter + \n        #                                                (Starting_pop_size - current_pop_size) - 1),\n         #      time = t,\n          #     Enter_time = time,\n           #    Lifespan = rexp(n = Starting_pop_size - current_pop_size, rate = 1),\n            #   alive = \"YES\",\n             #  Mortality_time = Enter_time + Lifespan)\n      \n      \n      \n      \n      \n      \n      \n      # add new rows to the starting_population\n      \n      starting_population &lt;- bind_rows(starting_population, new_recruits)\n      \n      # add new individuals to the candidate list, \n      \n      new_females &lt;- new_recruits %&gt;% filter(Sex == \"Female\") %&gt;% \n        rename(Female_ID = Individual_ID,\n               Female_mortality_time = Mortality_time,\n               Female_alive = alive,\n               Female_genotype = Genotype,\n               female_matings = matings) %&gt;% \n        select(-c(Sex, Enter_time, Lifespan))\n      \n      new_males &lt;- new_recruits %&gt;% filter(Sex == \"Male\") %&gt;% \n        rename(Male_ID = Individual_ID,\n               Male_mortality_time = Mortality_time,\n               Male_alive = alive,\n               Male_genotype = Genotype,\n               male_matings = matings) %&gt;% \n        select(-c(Sex, Enter_time, Lifespan))\n      \n      # find the number of each sex in the population, which we'll need to generate encounter times \n      # for new offspring\n      \n    Female_pop_size &lt;- length(starting_population %&gt;% \n                                filter(Sex == \"Female\" & alive == \"YES\") %&gt;% \n                                row_number())\n    \n    Male_pop_size &lt;- length(starting_population %&gt;% \n                                filter(Sex == \"Male\" & alive == \"YES\") %&gt;% \n                                row_number())\n      \n      # find mating interactions for new females and join with other life history info\n      \n    if(nrow(new_females) &gt; 0){\n      new_female_mating_encounter_times &lt;-\n                expand_grid(Male_ID = starting_population %&gt;% \n                      filter(Sex == \"Male\" & alive == \"YES\") %&gt;% pull(Individual_ID),\n                    Female_ID = new_females %&gt;% pull(Female_ID)) %&gt;% \n        bind_cols(tibble(\n          Mate_encounter_time_stamp = rexp(n = nrow(new_females) * Male_pop_size, rate = v),\n          fitness = 1,\n          mated = \"NO\")) %&gt;% \n        left_join(starting_population %&gt;% \n                    filter(Sex == \"Male\") %&gt;% \n                    distinct(Individual_ID,  .keep_all = T) %&gt;% \n                    rename(Male_ID = Individual_ID,\n                           Male_mortality_time = Mortality_time,\n                           Male_alive = alive,\n                           Male_genotype = Genotype,\n                           male_matings = matings) %&gt;% \n                    # here is the problem - these need to be imported from the existing candidate list\n                    #mutate(male_matings = 0) %&gt;% \n                    select(-c(Sex, Lifespan, Enter_time, time)),\n                  by = \"Male_ID\") %&gt;% \n        left_join(new_females, by = \"Female_ID\") \n      \n      # add them to the list\n      \n      candidate_list &lt;-\n        candidate_list %&gt;% \n        bind_rows(new_female_mating_encounter_times)\n    }\n      \n      # find mating interactions for new males\n      \n    if(nrow(new_males &gt; 0)){\n      new_male_mating_encounter_times &lt;-\n        expand_grid(Male_ID = new_males %&gt;% pull(Male_ID),\n                    Female_ID = starting_population %&gt;% \n                      filter(Sex == \"Female\" & alive == \"YES\") %&gt;% pull(Individual_ID)) %&gt;% \n        bind_cols(tibble(\n          Mate_encounter_time_stamp = rexp(n = nrow(new_males) * Female_pop_size, rate = v),\n          fitness = 1,\n          mated = \"NO\")) %&gt;%\n        left_join(starting_population %&gt;% \n                    filter(Sex == \"Female\") %&gt;% \n                    distinct(Individual_ID, .keep_all = T) %&gt;% \n                    rename(Female_ID = Individual_ID,\n                           Female_mortality_time = Mortality_time,\n                           Female_alive = alive,\n                           Female_genotype = Genotype,\n                           female_matings = matings) %&gt;% \n                    # here is the problem\n                    #mutate(Female_matings = 0) %&gt;% \n                    select(-c(Sex, Lifespan, Enter_time, time)),\n                  by = \"Female_ID\") %&gt;% \n        left_join(new_males, by = \"Male_ID\")\n        \n        # add them to the list\n        \n        candidate_list &lt;-\n          candidate_list %&gt;% \n          bind_rows(new_male_mating_encounter_times) %&gt;%\n          # this is hacky but it stops new pairs getting added twice when there are new males and \n          # females at the same time \n          distinct(Male_ID, Female_ID, .keep_all = T)\n      }\n      \n      \n    candidate_list &lt;-\n      rows_update(candidate_list, chosen_mating_pairs, by = c(\"Female_ID\", \"Male_ID\"))\n    \n      # Update the Individual_ID counter\n      Individual_ID_counter &lt;- Individual_ID_counter + (Starting_pop_size - current_pop_size)\n    }\n    \n    # Increment 't' by a small time step (e.g. 0.01)\n    t &lt;- t + 0.01\n  }\n  \n  # Print the simulation results\n  list(starting_population, candidate_list)\n}"
  },
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "Notes",
    "section": "",
    "text": "Premise outline\nThis project centres around the fate of alleles that encode inbreeding preference / avoidance depending on where they occur within the genome.\nBut the deeper idea is that inbreeding is a ‘selfish action’ where some alleles benefit from helping copies of themselves in other individuals, to the detriment of the broader organism. This detriment occurs because of inbreeding depression, which occurs because of homozygosity at other loci across the genome. Homozygosity causes the expression of recessive deleterious alleles which are otherwise rarely expressed, reducing the number of viable offspring produced by the organism.\nTo represent the broader genome, we can use alleles on hemizygous sex chromosomes, which have no opportunity to be homozygous and thus can gain no benefits of helping a relative gain a breeding opportunity. This broadly aligns with the ‘interests’ of the organism. For example, in an XY system alleles on the Y do not increase the propagation of alleles identical by descent through inbreeding, because females do not carry a Y. An autosomal allele, however, does have the potential to increase the proliferation of its copies by increasing the chance of breeding with a relative. This benefit is somewhat similar to that achieved by meiotic drive allele (clarify your thoughts here).\nA second potential angle is to explore the effect of the sex an allele encoding a preference for inbreeding is expressed in. This is important because the conditions often applicable to expression in a male present a greater parameter space for inbreeding preference (to put it too simply, because males invest less in each mating opportunity than females). Sex-specific effects also interact with hemizygous conditions, because in addition to XY systems, ZW systems exist and suddenly hemizygous chromosomes are present in females.\nSo in sum, there is a likely conflict between alleles on different chromosomes over the tendency to inbreed and there is a second non-mutually exclusive conflict between the sexes over inbreeding tendency. Wow, this is cool.\nThis idea might be deeper still. We point out that alleles on hemizygous sex chromosomes gain no indirect inclusive fitness benefits by mating with kin. The kicker is that inbreeding is just one example of this larger idea. There are no inclusive fitness benefits for alleles that encode any altruistic behaviour towards opposite sex individuals (where one sex possesses a hemizygous sex chromosome).\nSome specific notes from the meeting\n\nHanna’s 2006 paper shows when a preference for inbreeding should or should not be favoured for an autosomal allele, but does not consider other regions of the genome.\nStart with the Parker 1/3 thing, which Hanna and co re-derive. But they implicitly assume that the alleles in question here are on an autosome. We can make the change that they are on a sex chromosome, as stipulated above.\nThe X and Z can also be explored, because of their unusual inheritance dynamics. E.g. the X spends 2/3 of its time in females, but is always expressed in males and vice versa for the W.\nDoes it matter whether the loci that cause inbreeding depression are on the same/different chromosomes as those that encode inbreeding preferences…\nBirds versus mammals, flies versus butterflies etc - different hemizygous sex chromosomes\nUnity breaks down because of inheritance differences\nHamilton 1967 extraordinary sex chromosomes paper is a nice angle here\nHaplodiploidy - this is an extension opportunity.\nI will also try to simulate this question.\n\n\\(~\\)\n\n\n\n\nHanna suggests that the time in, time out continuous framework might not be the best option, as it is not the most intuitive for others.\nPerhaps keeping it simple may be the best way forward - females mate once, males mate multiple times. This produces differences in the opportunity cost of mating between the sexes.\nA discrete time model might work better\nScottish group models the inbreeding problem in helpful ways\nAnother way is to follow the Ekrem paper and simulate in an intelligent way (this method might be particularly fruitful)\nEssentially browse the different ways to approach the problem and follow one you like best.\nModels like our developing one do not consider purging dynamics that should occur if inbreeding becomes common.\n\n\n\n\nGrafen 1985 - A geometric view of relatedness\n\nCrozier’s relatedness (1970) = genetic similiarity: the extent to which they possess the same alleles (think genomic relatedness matrices)\nCrozier’s relationship (1970) = a measure of common ancestry that can be estimated from a pedigree (think animal models)\nPrice’s theorem is helpful. One important point is to divide the individual by its ploidy. This really matters for the inbreeding question.\nMy conclusion: the genetic similarity between an individual and a partner’s gametes (\\(ra\\)) will work\nThis presents a minor problem - immediately after mutation very high \\(ra\\) values are impossible to find, as there aren’t any individuals homozygous for the inbreeding allele."
  },
  {
    "objectID": "notes.html#project-background-notes",
    "href": "notes.html#project-background-notes",
    "title": "Notes",
    "section": "",
    "text": "Premise outline\nThis project centres around the fate of alleles that encode inbreeding preference / avoidance depending on where they occur within the genome.\nBut the deeper idea is that inbreeding is a ‘selfish action’ where some alleles benefit from helping copies of themselves in other individuals, to the detriment of the broader organism. This detriment occurs because of inbreeding depression, which occurs because of homozygosity at other loci across the genome. Homozygosity causes the expression of recessive deleterious alleles which are otherwise rarely expressed, reducing the number of viable offspring produced by the organism.\nTo represent the broader genome, we can use alleles on hemizygous sex chromosomes, which have no opportunity to be homozygous and thus can gain no benefits of helping a relative gain a breeding opportunity. This broadly aligns with the ‘interests’ of the organism. For example, in an XY system alleles on the Y do not increase the propagation of alleles identical by descent through inbreeding, because females do not carry a Y. An autosomal allele, however, does have the potential to increase the proliferation of its copies by increasing the chance of breeding with a relative. This benefit is somewhat similar to that achieved by meiotic drive allele (clarify your thoughts here).\nA second potential angle is to explore the effect of the sex an allele encoding a preference for inbreeding is expressed in. This is important because the conditions often applicable to expression in a male present a greater parameter space for inbreeding preference (to put it too simply, because males invest less in each mating opportunity than females). Sex-specific effects also interact with hemizygous conditions, because in addition to XY systems, ZW systems exist and suddenly hemizygous chromosomes are present in females.\nSo in sum, there is a likely conflict between alleles on different chromosomes over the tendency to inbreed and there is a second non-mutually exclusive conflict between the sexes over inbreeding tendency. Wow, this is cool.\nThis idea might be deeper still. We point out that alleles on hemizygous sex chromosomes gain no indirect inclusive fitness benefits by mating with kin. The kicker is that inbreeding is just one example of this larger idea. There are no inclusive fitness benefits for alleles that encode any altruistic behaviour towards opposite sex individuals (where one sex possesses a hemizygous sex chromosome).\nSome specific notes from the meeting\n\nHanna’s 2006 paper shows when a preference for inbreeding should or should not be favoured for an autosomal allele, but does not consider other regions of the genome.\nStart with the Parker 1/3 thing, which Hanna and co re-derive. But they implicitly assume that the alleles in question here are on an autosome. We can make the change that they are on a sex chromosome, as stipulated above.\nThe X and Z can also be explored, because of their unusual inheritance dynamics. E.g. the X spends 2/3 of its time in females, but is always expressed in males and vice versa for the W.\nDoes it matter whether the loci that cause inbreeding depression are on the same/different chromosomes as those that encode inbreeding preferences…\nBirds versus mammals, flies versus butterflies etc - different hemizygous sex chromosomes\nUnity breaks down because of inheritance differences\nHamilton 1967 extraordinary sex chromosomes paper is a nice angle here\nHaplodiploidy - this is an extension opportunity.\nI will also try to simulate this question.\n\n\\(~\\)\n\n\n\n\nHanna suggests that the time in, time out continuous framework might not be the best option, as it is not the most intuitive for others.\nPerhaps keeping it simple may be the best way forward - females mate once, males mate multiple times. This produces differences in the opportunity cost of mating between the sexes.\nA discrete time model might work better\nScottish group models the inbreeding problem in helpful ways\nAnother way is to follow the Ekrem paper and simulate in an intelligent way (this method might be particularly fruitful)\nEssentially browse the different ways to approach the problem and follow one you like best.\nModels like our developing one do not consider purging dynamics that should occur if inbreeding becomes common.\n\n\n\n\nGrafen 1985 - A geometric view of relatedness\n\nCrozier’s relatedness (1970) = genetic similiarity: the extent to which they possess the same alleles (think genomic relatedness matrices)\nCrozier’s relationship (1970) = a measure of common ancestry that can be estimated from a pedigree (think animal models)\nPrice’s theorem is helpful. One important point is to divide the individual by its ploidy. This really matters for the inbreeding question.\nMy conclusion: the genetic similarity between an individual and a partner’s gametes (\\(ra\\)) will work\nThis presents a minor problem - immediately after mutation very high \\(ra\\) values are impossible to find, as there aren’t any individuals homozygous for the inbreeding allele."
  },
  {
    "objectID": "Selfish_inbreeding.html",
    "href": "Selfish_inbreeding.html",
    "title": "Selfish_inbreeding",
    "section": "",
    "text": "I think we can answer our question using the Kokko and Ots framework, but is it the right choice? Given we take a gene’s eye view, is a population genetic model (or if too difficult, a simulation) required.\nKin selection pop-gen models are well developed, by the time in, time out investment into reproduction dynamics is going to require lots of thinking on my behalf.\nThis is my first goal…\n\n\n\nLet’s build a single autosomal locus, bi-allelic model, assuming Hardy-Weinberg equilibrium.\n\nThe \\(A\\) allele is the ‘non-donor’ allele (can be thought of as an allele encoding outbreeding preference). The frequency of this allele is \\(p\\).\nThe \\(a\\) allele is the donor allele (the altruistic allele, which may encode inbreeding preference). The frequency of this allele is \\(q = 1 - p\\).\n\\(1 - h^2\\) is the likelihood that the \\(Aa\\) genotype exhibits the altruistic behaviour. If \\(h^2 = 1\\) then the allele is completely recessive.\n\nThe next step is to find all possible mating types:\n\n\nCode\nmake_mating_table &lt;- function(){#k, normalP1, P1cost, P2cost){\n  \n  make_offspring &lt;- function(X, Y, type, zygote_freq){\n    tibble(mother = X,\n           father = Y,\n           type,\n           zygote_freq)\n  }\n\n  # Set up the 9 possible mating combinations\n  \n  mating_types &lt;- expand_grid(\n    mother = c(\"AA_female\",\n               \"Aa_female\",\n               \"aa_female\"),\n    father = c(\"AA_male\",\n                \"Aa_male\",\n                \"aa_male\"))\n\n\n # Specify the possible offspring genotypes for all the potential crosses; we use these for the type argument in the make_offspring function\n  \n  # AA x AA\n  \n  g0 &lt;- c(\"AA_female\", \"AA_male\")\n  \n  # Aa x AA & AA x Aa\n  \n  g1 &lt;- c(\"AA_female\", \"AA_male\", \"Aa_female\", \"Aa_male\")\n  \n  # aa x AA & AA x aa\n  \n  g2 &lt;- c(\"Aa_female\", \"Aa_male\")\n  \n  # Aa x Aa\n  \n  g3 &lt;- c(\"AA_female\", \"AA_male\", \"Aa_female\", \"Aa_male\", \"aa_female\", \"aa_male\")\n  \n  # Aa x aa & aa x Aa\n  \n  g4 &lt;- c(\"Aa_female\", \"Aa_male\", \"aa_female\", \"aa_male\")\n  \n  # aa x aa\n  \n  g5 &lt;- c(\"aa_female\", \"aa_male\")\n  \n  # Now calculate the zygote frequencies for each cross\n  \n  # even frequency of four offspring types\n  \n  rep25 &lt;- rep(0.25, 4)\n  \n  # even frequency between two offspring types\n  \n  rep5 &lt;- rep(0.5, 2)\n  \n  # Aa * Aa\n  \n  p1 &lt;- c(0.5*0.25,\n          0.5*0.25,\n          0.5*0.5,\n          0.5*0.5,\n          0.5*0.25,\n          0.5*0.25)\n  \n    bind_rows(\n    list(\n      make_offspring(\"AA\", \"AA\", g0, rep5),\n      make_offspring(\"AA\", \"Aa\", g1, rep25),\n      make_offspring(\"AA\", \"aa\", g2, rep5),\n      make_offspring(\"Aa\", \"AA\", g1, rep25),\n      make_offspring(\"Aa\", \"Aa\", g3, p1),\n      make_offspring(\"Aa\", \"aa\", g4, rep25),\n      make_offspring(\"aa\", \"AA\", g2, rep5),\n      make_offspring(\"aa\", \"Aa\", g4, rep25),\n      make_offspring(\"aa\", \"aa\", g5, rep5)\n    )) %&gt;% \n    arrange(mother, father)\n  \n}\n\nmake_mating_table() %&gt;% \n  rename(zygote_type = type) %&gt;% \n  kable() %&gt;% \n  kable_styling() %&gt;% \n  scroll_box(height = \"500px\")\n\n\nThe frequency of each mating type can be generated using the terms of the classic equation:\n\\[(p^2 + 2pq + q^2)^2\\] Note the final square generates the mating combination.\nThe frequencies of each genotype are\n\n\nCode\n(Mating_type_freqs &lt;-\n  tibble(mother = c(\"AA\",\"AA\",\"AA\",\"Aa\",\"Aa\",\"Aa\",\"aa\",\"aa\",\"aa\"),\n         father = c(\"AA\",\"Aa\",\"aa\",\"AA\",\"Aa\",\"aa\",\"AA\",\"Aa\",\"aa\"),\n         frequency = c(\"(p^4)/2\", \"(4p^3*q)/2\", \"(2p^2*2q^2)/2\", \"(4p^3*q)/2\",\n                       \"(4p^2*q^2)/2\", \"(4p*q^3)/2\", \"(2p^2*2q^2)/2\", \"(4p*q^3)/2\",\n                       \"(q^4)/2\"\n                       )) %&gt;% \n  kable() %&gt;% \n    kable_styling())\n\n\n\n\n\n\nThis is a two-step process. First we determine the frequencies of each genotype in the mating population (this could be, for example, after we’ve accounted for inbreeding costs), then we calculate the frequencies of each potential mating combination between these genotypes.\nStep 1 - finding the genotype frequencies in the mating population\nHere we can model an inbreeding depression effect, by changing the viability of different genotypes. I make this a constant for now, to aid my initial understanding, but later this will be one of the key parameters to vary.\nI have also allowed the dominance of \\(a\\) to vary. While inbreeding depression is the result of the increased expression of recessive alleles through homozygosity, partially recessive alleles are likely to be common. When \\(h = 1\\), the \\(a\\) allele is completely recessive.\n\n\nCode\negg_adult_viability_Aa_finder &lt;- function(h){1 - 0.33*(1 - h)}\n\n\n# viability of each genotype \n\negg_adult_viability_AA_female &lt;- 1\n\negg_adult_viability_Aa_female &lt;- egg_adult_viability_Aa_finder(h = 1)\n\negg_adult_viability_aa_female &lt;- 0.67\n\negg_adult_viability_AA_male &lt;- 1\n\negg_adult_viability_Aa_male &lt;- egg_adult_viability_Aa_finder(h = 1)\n\negg_adult_viability_aa_male &lt;- 0.67\n\n\nUsing these parameters, we implement selection, so that each genotype is represented in the mating combinations according to the product of its frequency and its viability, which is determined by inbreeding depression. I assume that mating success is constant across genotypes (this may not be possible if one allele approaches extinction).\nStep 2 - finding the frequency of all potential mating combinations in the mating population\nNext, we model the effect of inbreeding preference on inclusive fitness (direct + indirect fitness). I first assume that individuals are faced with a simultaneous choice situation - between mating with a relative or mating with an unrelated individual.\nFor simplicity at the outset, I assume that inbreeding preference is only expressed in females. To simulate inbreeding preference, females carrying the \\(a\\) allele mate with siblings (those individuals produced by the same parental genotype combination). However, dominance also plays a role here. A proportion \\(1 - h\\) of \\(Aa\\) females express inbreeding preference, whereas a proportion \\(h\\) do not.\nWith the above in mind, I calculate the expected frequencies of each possible ‘mating combination’ (i.e. the combination of the maternal and paternal genotypes) across the population. For singly-mated females with genotype \\(AA\\), the frequency of each mating type is simply given by \\(F_iM_j\\), where \\(F_i\\) and \\(M_j\\) are the female and male parental genotype frequencies, that is they choose mates at random. For females with genotype \\(Aa\\) a proportion \\(1 - h\\) express a preference for inbreeding. For these females, the expected frequencies for each mating type are determined by the parental mating type combination they were produced by. These females randomly choose a mate from a subset of possible genotypes produced by the parental combination e.g. an \\(AA\\) x \\(aa\\) mating will produce a female that will choose to mate with a \\(Aa\\) male (the only possible genotype of her brothers). The proportion \\(h\\) of \\(Aa\\) females not expressing the \\(a\\) allele choose mates at random. Finally, All \\(aa\\) females choose to mate with individuals sired by the same parental genotypes.\n\n\nCode\nfind_mating_type_frequencies &lt;- function(pop, prob_remating_SD, prob_remating_W){\n  \n  # Step 1\n  \n  pop$prop &lt;- pop$prop * pop$egg_adult_viability # here's the selection step \n  pop$prop &lt;- pop$prop / sum(pop$prop) # now restandardise so that the props sum to 1\n  \n  # Step 2\n  \n  # Calculate the frequency of each single-mating combination\n  \n  first_mating_types &lt;- \n    expand_grid(mother = pop$type[str_detect(pop$type, \"female\")], # find all possible mother genotypes\n                father = pop$type[!str_detect(pop$type, \"female\")]) %&gt;% # find all possible father1 genotypes\n    mutate(prop_matings = 0, remating_probability = 0) # make placeholder columns we will fill in below\n  \n  # find genotype frequencies calculated for each sex (mate choice means these will not necessarily be 50:50)\n  \n  female_frequencies &lt;- pop %&gt;% filter(str_detect(type, \"female\")) %&gt;% mutate(prop = prop / sum(prop))\n  male_frequencies &lt;- pop %&gt;% filter(!str_detect(type, \"female\")) %&gt;% mutate(prop = prop / sum(prop))\n  \n  # This next step multiplies the proportion[i] of females with genotype[i] with the proportion[i] of males with genotype[i] \n  \n  for(i in 1:nrow(first_mating_types)){\n    first_mating_types$prop_matings[i] &lt;- female_frequencies$prop[female_frequencies$type == first_mating_types$mother[i]] * \n      male_frequencies$prop[male_frequencies$type == first_mating_types$father1[i]]\n  }\n  \n  # Now we incorporate female remating probabilities (SDSD males assumed to have same effect on females as WW males)\n  \n  first_mating_types$remating_probability &lt;- ifelse(str_detect(first_mating_types$father1, \"WSD\"), prob_remating_SD, prob_remating_W)\n  \n  # Now lets calculate the frequency of each double-mating combination, with the end product being the mating_type_frequency of each mating possibility\n  \n  second_mating_types &lt;- expand_grid(first_mating_types, father2 = c(\"none\", unique(first_mating_types$father1))) %&gt;%\n    mutate(mating_type_freq = 0)\n  \n  # scale the proportion of matings calculated above by the likelihood that these females will mate once\n  \n  for(i in 1:nrow(second_mating_types)){\n    if(second_mating_types$father2[i] == \"none\"){\n      second_mating_types$mating_type_freq[i] &lt;- \n        second_mating_types$prop_matings[i] * # Frequency of females with this value of father1\n        (1 - second_mating_types$remating_probability[i])\n    }\n    \n    # now calculate the frequency of mating tryads for the females that mate twice\n    \n    if(second_mating_types$father2[i] != \"none\"){\n      second_mating_types$mating_type_freq[i] &lt;- \n        second_mating_types$prop_matings[i] * # Frequency of females with this value of father1\n        second_mating_types$remating_probability[i] *\n        male_frequencies$prop[male_frequencies$type == second_mating_types$father2[i]] # pop. freq of the 2nd male type\n    }\n  }\n  \n  second_mating_types %&gt;% # output\n    select(mother, father1, father2, mating_type_freq) %&gt;%\n    # clean up the output by remving redundant info (makes it easier later)\n    mutate(mother = str_remove_all(mother, \"_female\"),\n           father1 = str_remove_all(father1, \"_male\"),\n           father2 = str_remove_all(father2, \"_male\"))\n}\n\n\n\n\n\n\n\n\\(~\\)\nThis is hard, but everything should be in the Kokko and Ots paper\nWe can now directly follow Kokko and Ots (2006), altering the equations where required to reflect the fitness consequences of inbreeding for different chromosomes.\n\n\n\n\n\n\nParameter definitions\n\n\n\n\\(\\delta\\): fraction of offspring lost due to inbreeding (inbreeding depression)\n\\(v_I\\): ‘time in’ reproductive value of individuals of the choosing sex\n\\(w_I\\): ‘time in’ reproductive value of individuals of the opposite sex\n\\(v_O\\): ‘time out’ reproductive value of individuals of the choosing sex\n\\(w_O\\): ‘time out’ reproductive value of individuals of the opposite sex\n\\(M\\): the unrelated mate encounter rate during time in (when sex ratio is unbiased)\n\\(m_v = M \\sqrt{\\beta}\\): the mating rate for the choosy sex\n\\(m_w = \\frac{M}{\\sqrt{\\beta}}\\): the mating rate for the opposite sex\n\\(\\beta\\): the operational sex ratio (males:females)\n\\(a\\): average number of offspring produced from a mating (I think - needs to be found numerically)\n\\(T_v\\): time out duration for choosing sex\n\\(T_w\\): time out duration for opposite sex\n\\(\\mu_{Iv}\\): ‘time in’ mortality risk of individuals of the choosing sex\n\\(\\mu_{Iw}\\): ‘time in’ mortality risk of individuals of the opposite sex\n\\(\\mu_{Ov}\\): ‘time out’ mortality risk of individuals of the choosing sex\n\\(\\mu_{Ow}\\): ‘time out’ mortality risk of individuals of the opposite sex\n\n\nAfter mating, offspring are produced, with a direct fitness benefit of \\[a(v_I + w_I)\\]\n\n\nThe choosing sex can either mate with an unrelated individual or an individual related by \\(r\\).\nMate with unrelated individual: \\(v_O + ro_iw_I + a(v_I + w_1)\\)\nMate with kin: \\(v_O + ro_iw_O + (1 + ro_i)(1 - \\delta)a(v_I + w_1)\\)\nWe continue to frame our study around the value of \\(\\delta\\) that can be tolerated, or put another way, to what extent can inbreeding reduce offspring viability and still be the selected strategy?\nWe therefore rearrange the equation to find the threshold value of \\(\\delta\\) where\n\\[v_O + ro_iw_O + (1 + ro_i)(1 - \\delta)a(v_I + w_1) \\gt v_O + ro_iw_I + a(v_I + w_1)\\]\nto\n\\[\\delta_{sim} = 1 - \\frac{a(v_I + w_I) + ro_i(w_I - w_O)}{a(1 + ro_i)(v_I + w_I)}\\] which can be more neatly expressed as\n\\[\\delta_{sim} = \\frac{a ro_i(v_I + w_I) - ro_i(w_I - w_O)}{a(1 + ro_i)(v_I + w_I)}\\]\n\n\n\nIn this scenario, a choosy individual (note that our models are framed around the strategy adopted by the choosy individuals) encounters a single potential mate, related by \\(r\\). The choosing sex can either mate with this individual or elect not to mate and wait for a future opportunity.\nNot mating produces the inclusive fitness:\n\\[v_I + ro_iw_I\\] Now an inbreeding preference strategy is favoured where\n\\[v_O + ro_iw_O + (1 + ro_i)(1 - \\delta)a(v_I + w_1) \\gt v_I + ro_iw_I\\]\nThus, the threshold \\(\\delta\\) value below which inbreeding is adaptive is\n\\[\\delta_{seq} = 1 - \\frac{(v_I - v_O) + ro_i(w_I - w_O)}{a(1 + ro_i)(v_I + w_I)}\\] \\(~\\)\n\n\n\n\n\\(~\\)\n$$\n\\[\\begin{bmatrix}dv_I/dt\\\\\ndv_O/dt\\\\\ndw_I/dt\\\\\ndw_O/dt\n\\end{bmatrix}\\]\n=\n\\[\\begin{bmatrix}-\\mu_{Iv} + m_v(a - 1)  & m_v & am_v &  0\\\\\n1/T_v & 1/T_v -\\mu_{Ov} & 0 & 0\\\\\nam_w & 0 & -\\mu_{Iw} + m_w(a - 1) & m_w\\\\\n0 & 0 & 1/Tw & 1/T_w -\\mu_{Ow}\n\\end{bmatrix}\\]\n\n\\[\\begin{bmatrix}v_I\\\\\nv_O\\\\\nw_I\\\\\nw_O\n\\end{bmatrix}\\]\n$$\n\n\n\nCode\nm1 &lt;- matrix(c(1:4), ncol = 1)\n\nm2 &lt;- matrix(c(1:16), nrow = 4, ncol = 4)\n\nm2 %*% m1\n\n\n     [,1]\n[1,]   90\n[2,]  100\n[3,]  110\n[4,]  120\n\n\nCreate a function to calculate reproductive value for each state\n\n\nCode\nchange_repro_values &lt;- \n  matrix(c(-1*death_rate_in_choosy_sex + mating_rate_choosy_sex *(a - 1),\n           mating_rate_choosy_sex,\n           a*mating_rate_choosy_sex,\n           0,\n           1/time_out_duration_choosy_sex,\n           -1/time_out_duration_choosy_sex - death_rate_out_choosy_sex,\n           0,\n           0,\n           a*mating_rate_opp_sex,\n           0,\n           -1*death_rate_in_opp_sex + mating_rate_opp_sex *(a - 1),\n           mating_rate_opp_sex,\n           0,\n           0,\n           1/time_out_duration_opp_sex,\n           -1/time_out_duration_opp_sex - death_rate_out_opp_sex),\n         nrow = 4, ncol = 4)\n\nstate_repro_values &lt;- c(vI, vO, wI, wO)\n\nparameters &lt;- \n  expand_grid(r = 0.5,\n              x = c(0, 0.5, 1),\n              death_rate_in_choosy_sex = 1,\n              mating_rate_choosy_sex = ,\n              time_out_duration_choosy_sex = c(0.1, 0.01),\n              death_rate_out_choosy_sex = 1,\n              mating_rate_opp_sex = ,\n              death_rate_in_opp_sex = 1,\n              time_out_duration_opp_sex = ,\n              death_rate_out_opp_sex = 1,\n              a = ((mating_rate_choosy_sex*(1/time_out_duration_choosy_sex + death_rate_in_choosy_sex)/\n                      (death_rate_out_choosy_sex/time_out_duration_choosy_sex + \n                         death_rate_in_choosy_sex*(mating_rate_choosy_sex + death_rate_out_choosy_sex)))^-1)/2\n  )"
  },
  {
    "objectID": "Selfish_inbreeding.html#changing-the-focus-from-chromosomes-to-alleles",
    "href": "Selfish_inbreeding.html#changing-the-focus-from-chromosomes-to-alleles",
    "title": "Selfish_inbreeding",
    "section": "",
    "text": "I think we can answer our question using the Kokko and Ots framework, but is it the right choice? Given we take a gene’s eye view, is a population genetic model (or if too difficult, a simulation) required.\nKin selection pop-gen models are well developed, by the time in, time out investment into reproduction dynamics is going to require lots of thinking on my behalf.\nThis is my first goal…\n\n\n\nLet’s build a single autosomal locus, bi-allelic model, assuming Hardy-Weinberg equilibrium.\n\nThe \\(A\\) allele is the ‘non-donor’ allele (can be thought of as an allele encoding outbreeding preference). The frequency of this allele is \\(p\\).\nThe \\(a\\) allele is the donor allele (the altruistic allele, which may encode inbreeding preference). The frequency of this allele is \\(q = 1 - p\\).\n\\(1 - h^2\\) is the likelihood that the \\(Aa\\) genotype exhibits the altruistic behaviour. If \\(h^2 = 1\\) then the allele is completely recessive.\n\nThe next step is to find all possible mating types:\n\n\nCode\nmake_mating_table &lt;- function(){#k, normalP1, P1cost, P2cost){\n  \n  make_offspring &lt;- function(X, Y, type, zygote_freq){\n    tibble(mother = X,\n           father = Y,\n           type,\n           zygote_freq)\n  }\n\n  # Set up the 9 possible mating combinations\n  \n  mating_types &lt;- expand_grid(\n    mother = c(\"AA_female\",\n               \"Aa_female\",\n               \"aa_female\"),\n    father = c(\"AA_male\",\n                \"Aa_male\",\n                \"aa_male\"))\n\n\n # Specify the possible offspring genotypes for all the potential crosses; we use these for the type argument in the make_offspring function\n  \n  # AA x AA\n  \n  g0 &lt;- c(\"AA_female\", \"AA_male\")\n  \n  # Aa x AA & AA x Aa\n  \n  g1 &lt;- c(\"AA_female\", \"AA_male\", \"Aa_female\", \"Aa_male\")\n  \n  # aa x AA & AA x aa\n  \n  g2 &lt;- c(\"Aa_female\", \"Aa_male\")\n  \n  # Aa x Aa\n  \n  g3 &lt;- c(\"AA_female\", \"AA_male\", \"Aa_female\", \"Aa_male\", \"aa_female\", \"aa_male\")\n  \n  # Aa x aa & aa x Aa\n  \n  g4 &lt;- c(\"Aa_female\", \"Aa_male\", \"aa_female\", \"aa_male\")\n  \n  # aa x aa\n  \n  g5 &lt;- c(\"aa_female\", \"aa_male\")\n  \n  # Now calculate the zygote frequencies for each cross\n  \n  # even frequency of four offspring types\n  \n  rep25 &lt;- rep(0.25, 4)\n  \n  # even frequency between two offspring types\n  \n  rep5 &lt;- rep(0.5, 2)\n  \n  # Aa * Aa\n  \n  p1 &lt;- c(0.5*0.25,\n          0.5*0.25,\n          0.5*0.5,\n          0.5*0.5,\n          0.5*0.25,\n          0.5*0.25)\n  \n    bind_rows(\n    list(\n      make_offspring(\"AA\", \"AA\", g0, rep5),\n      make_offspring(\"AA\", \"Aa\", g1, rep25),\n      make_offspring(\"AA\", \"aa\", g2, rep5),\n      make_offspring(\"Aa\", \"AA\", g1, rep25),\n      make_offspring(\"Aa\", \"Aa\", g3, p1),\n      make_offspring(\"Aa\", \"aa\", g4, rep25),\n      make_offspring(\"aa\", \"AA\", g2, rep5),\n      make_offspring(\"aa\", \"Aa\", g4, rep25),\n      make_offspring(\"aa\", \"aa\", g5, rep5)\n    )) %&gt;% \n    arrange(mother, father)\n  \n}\n\nmake_mating_table() %&gt;% \n  rename(zygote_type = type) %&gt;% \n  kable() %&gt;% \n  kable_styling() %&gt;% \n  scroll_box(height = \"500px\")\n\n\nThe frequency of each mating type can be generated using the terms of the classic equation:\n\\[(p^2 + 2pq + q^2)^2\\] Note the final square generates the mating combination.\nThe frequencies of each genotype are\n\n\nCode\n(Mating_type_freqs &lt;-\n  tibble(mother = c(\"AA\",\"AA\",\"AA\",\"Aa\",\"Aa\",\"Aa\",\"aa\",\"aa\",\"aa\"),\n         father = c(\"AA\",\"Aa\",\"aa\",\"AA\",\"Aa\",\"aa\",\"AA\",\"Aa\",\"aa\"),\n         frequency = c(\"(p^4)/2\", \"(4p^3*q)/2\", \"(2p^2*2q^2)/2\", \"(4p^3*q)/2\",\n                       \"(4p^2*q^2)/2\", \"(4p*q^3)/2\", \"(2p^2*2q^2)/2\", \"(4p*q^3)/2\",\n                       \"(q^4)/2\"\n                       )) %&gt;% \n  kable() %&gt;% \n    kable_styling())"
  },
  {
    "objectID": "Selfish_inbreeding.html#function-to-determine-the-mating-type-frequencies-of-the-population",
    "href": "Selfish_inbreeding.html#function-to-determine-the-mating-type-frequencies-of-the-population",
    "title": "Selfish_inbreeding",
    "section": "",
    "text": "This is a two-step process. First we determine the frequencies of each genotype in the mating population (this could be, for example, after we’ve accounted for inbreeding costs), then we calculate the frequencies of each potential mating combination between these genotypes.\nStep 1 - finding the genotype frequencies in the mating population\nHere we can model an inbreeding depression effect, by changing the viability of different genotypes. I make this a constant for now, to aid my initial understanding, but later this will be one of the key parameters to vary.\nI have also allowed the dominance of \\(a\\) to vary. While inbreeding depression is the result of the increased expression of recessive alleles through homozygosity, partially recessive alleles are likely to be common. When \\(h = 1\\), the \\(a\\) allele is completely recessive.\n\n\nCode\negg_adult_viability_Aa_finder &lt;- function(h){1 - 0.33*(1 - h)}\n\n\n# viability of each genotype \n\negg_adult_viability_AA_female &lt;- 1\n\negg_adult_viability_Aa_female &lt;- egg_adult_viability_Aa_finder(h = 1)\n\negg_adult_viability_aa_female &lt;- 0.67\n\negg_adult_viability_AA_male &lt;- 1\n\negg_adult_viability_Aa_male &lt;- egg_adult_viability_Aa_finder(h = 1)\n\negg_adult_viability_aa_male &lt;- 0.67\n\n\nUsing these parameters, we implement selection, so that each genotype is represented in the mating combinations according to the product of its frequency and its viability, which is determined by inbreeding depression. I assume that mating success is constant across genotypes (this may not be possible if one allele approaches extinction).\nStep 2 - finding the frequency of all potential mating combinations in the mating population\nNext, we model the effect of inbreeding preference on inclusive fitness (direct + indirect fitness). I first assume that individuals are faced with a simultaneous choice situation - between mating with a relative or mating with an unrelated individual.\nFor simplicity at the outset, I assume that inbreeding preference is only expressed in females. To simulate inbreeding preference, females carrying the \\(a\\) allele mate with siblings (those individuals produced by the same parental genotype combination). However, dominance also plays a role here. A proportion \\(1 - h\\) of \\(Aa\\) females express inbreeding preference, whereas a proportion \\(h\\) do not.\nWith the above in mind, I calculate the expected frequencies of each possible ‘mating combination’ (i.e. the combination of the maternal and paternal genotypes) across the population. For singly-mated females with genotype \\(AA\\), the frequency of each mating type is simply given by \\(F_iM_j\\), where \\(F_i\\) and \\(M_j\\) are the female and male parental genotype frequencies, that is they choose mates at random. For females with genotype \\(Aa\\) a proportion \\(1 - h\\) express a preference for inbreeding. For these females, the expected frequencies for each mating type are determined by the parental mating type combination they were produced by. These females randomly choose a mate from a subset of possible genotypes produced by the parental combination e.g. an \\(AA\\) x \\(aa\\) mating will produce a female that will choose to mate with a \\(Aa\\) male (the only possible genotype of her brothers). The proportion \\(h\\) of \\(Aa\\) females not expressing the \\(a\\) allele choose mates at random. Finally, All \\(aa\\) females choose to mate with individuals sired by the same parental genotypes.\n\n\nCode\nfind_mating_type_frequencies &lt;- function(pop, prob_remating_SD, prob_remating_W){\n  \n  # Step 1\n  \n  pop$prop &lt;- pop$prop * pop$egg_adult_viability # here's the selection step \n  pop$prop &lt;- pop$prop / sum(pop$prop) # now restandardise so that the props sum to 1\n  \n  # Step 2\n  \n  # Calculate the frequency of each single-mating combination\n  \n  first_mating_types &lt;- \n    expand_grid(mother = pop$type[str_detect(pop$type, \"female\")], # find all possible mother genotypes\n                father = pop$type[!str_detect(pop$type, \"female\")]) %&gt;% # find all possible father1 genotypes\n    mutate(prop_matings = 0, remating_probability = 0) # make placeholder columns we will fill in below\n  \n  # find genotype frequencies calculated for each sex (mate choice means these will not necessarily be 50:50)\n  \n  female_frequencies &lt;- pop %&gt;% filter(str_detect(type, \"female\")) %&gt;% mutate(prop = prop / sum(prop))\n  male_frequencies &lt;- pop %&gt;% filter(!str_detect(type, \"female\")) %&gt;% mutate(prop = prop / sum(prop))\n  \n  # This next step multiplies the proportion[i] of females with genotype[i] with the proportion[i] of males with genotype[i] \n  \n  for(i in 1:nrow(first_mating_types)){\n    first_mating_types$prop_matings[i] &lt;- female_frequencies$prop[female_frequencies$type == first_mating_types$mother[i]] * \n      male_frequencies$prop[male_frequencies$type == first_mating_types$father1[i]]\n  }\n  \n  # Now we incorporate female remating probabilities (SDSD males assumed to have same effect on females as WW males)\n  \n  first_mating_types$remating_probability &lt;- ifelse(str_detect(first_mating_types$father1, \"WSD\"), prob_remating_SD, prob_remating_W)\n  \n  # Now lets calculate the frequency of each double-mating combination, with the end product being the mating_type_frequency of each mating possibility\n  \n  second_mating_types &lt;- expand_grid(first_mating_types, father2 = c(\"none\", unique(first_mating_types$father1))) %&gt;%\n    mutate(mating_type_freq = 0)\n  \n  # scale the proportion of matings calculated above by the likelihood that these females will mate once\n  \n  for(i in 1:nrow(second_mating_types)){\n    if(second_mating_types$father2[i] == \"none\"){\n      second_mating_types$mating_type_freq[i] &lt;- \n        second_mating_types$prop_matings[i] * # Frequency of females with this value of father1\n        (1 - second_mating_types$remating_probability[i])\n    }\n    \n    # now calculate the frequency of mating tryads for the females that mate twice\n    \n    if(second_mating_types$father2[i] != \"none\"){\n      second_mating_types$mating_type_freq[i] &lt;- \n        second_mating_types$prop_matings[i] * # Frequency of females with this value of father1\n        second_mating_types$remating_probability[i] *\n        male_frequencies$prop[male_frequencies$type == second_mating_types$father2[i]] # pop. freq of the 2nd male type\n    }\n  }\n  \n  second_mating_types %&gt;% # output\n    select(mother, father1, father2, mating_type_freq) %&gt;%\n    # clean up the output by remving redundant info (makes it easier later)\n    mutate(mother = str_remove_all(mother, \"_female\"),\n           father1 = str_remove_all(father1, \"_male\"),\n           father2 = str_remove_all(father2, \"_male\"))\n}"
  },
  {
    "objectID": "Selfish_inbreeding.html#time-in-and-time-out",
    "href": "Selfish_inbreeding.html#time-in-and-time-out",
    "title": "Selfish_inbreeding",
    "section": "",
    "text": "\\(~\\)\nThis is hard, but everything should be in the Kokko and Ots paper\nWe can now directly follow Kokko and Ots (2006), altering the equations where required to reflect the fitness consequences of inbreeding for different chromosomes.\n\n\n\n\n\n\nParameter definitions\n\n\n\n\\(\\delta\\): fraction of offspring lost due to inbreeding (inbreeding depression)\n\\(v_I\\): ‘time in’ reproductive value of individuals of the choosing sex\n\\(w_I\\): ‘time in’ reproductive value of individuals of the opposite sex\n\\(v_O\\): ‘time out’ reproductive value of individuals of the choosing sex\n\\(w_O\\): ‘time out’ reproductive value of individuals of the opposite sex\n\\(M\\): the unrelated mate encounter rate during time in (when sex ratio is unbiased)\n\\(m_v = M \\sqrt{\\beta}\\): the mating rate for the choosy sex\n\\(m_w = \\frac{M}{\\sqrt{\\beta}}\\): the mating rate for the opposite sex\n\\(\\beta\\): the operational sex ratio (males:females)\n\\(a\\): average number of offspring produced from a mating (I think - needs to be found numerically)\n\\(T_v\\): time out duration for choosing sex\n\\(T_w\\): time out duration for opposite sex\n\\(\\mu_{Iv}\\): ‘time in’ mortality risk of individuals of the choosing sex\n\\(\\mu_{Iw}\\): ‘time in’ mortality risk of individuals of the opposite sex\n\\(\\mu_{Ov}\\): ‘time out’ mortality risk of individuals of the choosing sex\n\\(\\mu_{Ow}\\): ‘time out’ mortality risk of individuals of the opposite sex\n\n\nAfter mating, offspring are produced, with a direct fitness benefit of \\[a(v_I + w_I)\\]\n\n\nThe choosing sex can either mate with an unrelated individual or an individual related by \\(r\\).\nMate with unrelated individual: \\(v_O + ro_iw_I + a(v_I + w_1)\\)\nMate with kin: \\(v_O + ro_iw_O + (1 + ro_i)(1 - \\delta)a(v_I + w_1)\\)\nWe continue to frame our study around the value of \\(\\delta\\) that can be tolerated, or put another way, to what extent can inbreeding reduce offspring viability and still be the selected strategy?\nWe therefore rearrange the equation to find the threshold value of \\(\\delta\\) where\n\\[v_O + ro_iw_O + (1 + ro_i)(1 - \\delta)a(v_I + w_1) \\gt v_O + ro_iw_I + a(v_I + w_1)\\]\nto\n\\[\\delta_{sim} = 1 - \\frac{a(v_I + w_I) + ro_i(w_I - w_O)}{a(1 + ro_i)(v_I + w_I)}\\] which can be more neatly expressed as\n\\[\\delta_{sim} = \\frac{a ro_i(v_I + w_I) - ro_i(w_I - w_O)}{a(1 + ro_i)(v_I + w_I)}\\]\n\n\n\nIn this scenario, a choosy individual (note that our models are framed around the strategy adopted by the choosy individuals) encounters a single potential mate, related by \\(r\\). The choosing sex can either mate with this individual or elect not to mate and wait for a future opportunity.\nNot mating produces the inclusive fitness:\n\\[v_I + ro_iw_I\\] Now an inbreeding preference strategy is favoured where\n\\[v_O + ro_iw_O + (1 + ro_i)(1 - \\delta)a(v_I + w_1) \\gt v_I + ro_iw_I\\]\nThus, the threshold \\(\\delta\\) value below which inbreeding is adaptive is\n\\[\\delta_{seq} = 1 - \\frac{(v_I - v_O) + ro_i(w_I - w_O)}{a(1 + ro_i)(v_I + w_I)}\\] \\(~\\)\n\n\n\n\n\\(~\\)\n$$\n\\[\\begin{bmatrix}dv_I/dt\\\\\ndv_O/dt\\\\\ndw_I/dt\\\\\ndw_O/dt\n\\end{bmatrix}\\]\n=\n\\[\\begin{bmatrix}-\\mu_{Iv} + m_v(a - 1)  & m_v & am_v &  0\\\\\n1/T_v & 1/T_v -\\mu_{Ov} & 0 & 0\\\\\nam_w & 0 & -\\mu_{Iw} + m_w(a - 1) & m_w\\\\\n0 & 0 & 1/Tw & 1/T_w -\\mu_{Ow}\n\\end{bmatrix}\\]\n\n\\[\\begin{bmatrix}v_I\\\\\nv_O\\\\\nw_I\\\\\nw_O\n\\end{bmatrix}\\]\n$$\n\n\n\nCode\nm1 &lt;- matrix(c(1:4), ncol = 1)\n\nm2 &lt;- matrix(c(1:16), nrow = 4, ncol = 4)\n\nm2 %*% m1\n\n\n     [,1]\n[1,]   90\n[2,]  100\n[3,]  110\n[4,]  120\n\n\nCreate a function to calculate reproductive value for each state\n\n\nCode\nchange_repro_values &lt;- \n  matrix(c(-1*death_rate_in_choosy_sex + mating_rate_choosy_sex *(a - 1),\n           mating_rate_choosy_sex,\n           a*mating_rate_choosy_sex,\n           0,\n           1/time_out_duration_choosy_sex,\n           -1/time_out_duration_choosy_sex - death_rate_out_choosy_sex,\n           0,\n           0,\n           a*mating_rate_opp_sex,\n           0,\n           -1*death_rate_in_opp_sex + mating_rate_opp_sex *(a - 1),\n           mating_rate_opp_sex,\n           0,\n           0,\n           1/time_out_duration_opp_sex,\n           -1/time_out_duration_opp_sex - death_rate_out_opp_sex),\n         nrow = 4, ncol = 4)\n\nstate_repro_values &lt;- c(vI, vO, wI, wO)\n\nparameters &lt;- \n  expand_grid(r = 0.5,\n              x = c(0, 0.5, 1),\n              death_rate_in_choosy_sex = 1,\n              mating_rate_choosy_sex = ,\n              time_out_duration_choosy_sex = c(0.1, 0.01),\n              death_rate_out_choosy_sex = 1,\n              mating_rate_opp_sex = ,\n              death_rate_in_opp_sex = 1,\n              time_out_duration_opp_sex = ,\n              death_rate_out_opp_sex = 1,\n              a = ((mating_rate_choosy_sex*(1/time_out_duration_choosy_sex + death_rate_in_choosy_sex)/\n                      (death_rate_out_choosy_sex/time_out_duration_choosy_sex + \n                         death_rate_in_choosy_sex*(mating_rate_choosy_sex + death_rate_out_choosy_sex)))^-1)/2\n  )"
  },
  {
    "objectID": "useful_cuts.html",
    "href": "useful_cuts.html",
    "title": "useful_cuts",
    "section": "",
    "text": "Code\n# create the starting population\n\nset.seed(123)\n\ninitial_population &lt;- \n  tibble(Individual_ID = 1:10,\n         entrance_time = rep(0, 10),\n         Lifespan = round(rexp(10, 1), 2),\n         alive = \"YES\") %&gt;% \n  mutate(Mortality_time = entrance_time + Lifespan)\n\n# build the main simulation function\n\ncontinuous_time_simulation &lt;- function(starting_population){\n  \n  # we need this so that t is correctly matched to Mortality_time\n  \n  tolerance &lt;- 0.001\n  \n  # Initialize the timer t to 0\n  t &lt;- 0\n  \n  # Initialize the Individual_ID counter\n  Individual_ID_counter &lt;- 11\n  \n  # Run the simulation until t reaches 10\n  while (t &lt;= 1) {\n    \n    starting_population &lt;- \n      starting_population %&gt;% \n      mutate(time = t,\n             alive = if_else(Mortality_time &lt;= time, \"NO\", alive))\n    \n    # Check if any Mortality_time value matches the current time t - we use the tolerance variable to allow the small amount of wiggle room required to produce a match\n    \n    matching_condition &lt;- which(abs(starting_population$Mortality_time - t) &lt; tolerance)\n    #matching_condition &lt;- 10 - length(which(starting_population$alive == \"YES\"))\n    \n    # we can also add the length of the mated female subset, if 0 don't add a new row\n    \n    if (length(matching_condition) &gt; 0) {\n      #if (matching_condition &gt; 0) {\n      # Add new rows to the starting_population\n      new_rows &lt;- \n        tibble(\n          Individual_ID = Individual_ID_counter:(Individual_ID_counter + length(matching_condition) - 1),\n          entrance_time = rep(t, length(matching_condition)),\n          Lifespan = round(rexp(length(matching_condition)), 2),\n          alive = rep(\"YES\", length(matching_condition))) %&gt;% \n        mutate(Mortality_time = entrance_time + Lifespan)\n      \n      starting_population &lt;- bind_rows(starting_population, new_rows)\n      \n      # Update the Individual_ID counter\n      Individual_ID_counter &lt;- Individual_ID_counter + length(matching_condition)\n    }\n    \n    # Increment 't' by a small time step (e.g. 0.01)\n    t &lt;- t + 0.01\n  }\n  \n  # Print the simulation results\n  print(n = 20, starting_population)\n}\n\ncontinuous_time_simulation(initial_population)\nA very important point is that we consider a population where the resident strategy is to accept mating with a relative. Our simulation therefore estimates the condition required for inbreeding avoidance to invade. One consequence of inbreeding avoidance is an increased risk of going unmated for both sexes when they forego mating with a relative, particularly when the cost of mating for males is large, or search efficiency is low."
  },
  {
    "objectID": "useful_cuts.html#plot-the-results",
    "href": "useful_cuts.html#plot-the-results",
    "title": "useful_cuts",
    "section": "Plot the results",
    "text": "Plot the results\n\nWhen is inbreeding favoured in each sex?\n\n\nCode\npal1 &lt;- met.brewer(\"OKeeffe1\", n=100, direction = -1)\npal2 &lt;- met.brewer(\"Hiroshige\", n=50, direction = -1)\n  \nFemale_plot &lt;-\n  results %&gt;%\n  filter(v == 100, C != 2 & C != 4) %&gt;% \n  ggplot(aes(x = r, y = D)) +\n  geom_blank() +\n  geom_raster(aes(fill = female_fitness_contrast)) + \n  stat_contour(aes(z = female_fitness_contrast*100), colour = \"black\", binwidth = 25,\n               breaks = c(-100, -75, -50, -25, 25, 50, 75, 100)) +\n  stat_contour(aes(z = female_fitness_contrast*100), colour = \"black\", breaks = 0,\n               linetype = 2) +\n  geom_line(data = female_inbreeding_equilibria, aes(x = r, y = D),\n            linetype = 3, alpha = 0.5) +\n  scale_fill_gradientn(colours = pal1, breaks = c(-1, -0.5, 0, 0.5, 1), limits = c(-1.5, 1.5)) +\n  facet_wrap(C ~ a, \n             scales = \"free\", nrow = 3, strip.position = c(\"top\"),\n             labeller = label_glue('C = {`C`}, a = {`a`}')) +\n  labs(x = expression(~italic(r)~', the relatedness coefficient'),\n       y = ~delta~'(inbreeding depression)',\n       fill = \"Inbreeding fitness\",\n       subtitle = \"Alleles present in females\") +\n  scale_x_continuous(expand = c(0, 0)) + \n  scale_y_continuous(expand = c(0, 0)) + # labels = c(0, 25, 50, 75, 90)) +\n  theme(panel.border = element_rect(fill = NA, colour = \"black\", linewidth = .8),\n        strip.background = element_rect(colour = \"black\", fill = \"Aliceblue\", linewidth = .8))\n\n\nMale_plot &lt;-\n  results %&gt;%\n  filter(v == 100, C != 2 & C != 4) %&gt;% \n  ggplot(aes(x = r, y = D)) +\n  geom_blank() +\n  geom_raster(aes(fill = male_fitness_contrast)) + \n  stat_contour(aes(z = male_fitness_contrast*100), colour = \"black\", binwidth = 25,\n               breaks = c(-75, -50, -25, 25, 50, 75, 100)) +\n  stat_contour(aes(z = male_fitness_contrast*100), colour = \"black\", breaks = 0,\n               linetype = 2) +\n  geom_line(data = male_inbreeding_equilibria, aes(x = r, y = D),\n            linetype = 3, alpha = 0.5) +\n  scale_fill_gradientn(colours = pal1, breaks = c(-1, -0.5, 0, 0.5, 1), limits = c(-1.5, 1.5)) +\n  facet_wrap(C ~ a, \n             scales = \"free\", nrow = 3, strip.position = c(\"top\"),\n             labeller = label_glue('C = {`C`}, a = {`a`}')) +\n  labs(x = expression(~italic(r)~', the relatedness coefficient'),\n       y = ~delta~'(inbreeding depression)',\n       fill = \"Inbreeding fitness\",\n       subtitle = \"Alleles present in males\") +\n  scale_x_continuous(expand = c(0, 0)) + \n  scale_y_continuous(expand = c(0, 0)) + # labels = c(0, 25, 50, 75, 90)) +\n  theme(panel.border = element_rect(fill = NA, colour = \"black\", size = .8),\n        strip.background = element_rect(colour = \"black\", fill = \"Aliceblue\", linewidth = .8))\n\nFemale_plot\n\nMale_plot\n\n\n\n\nWhen is there intragenomic conflict over inbreeding?\n\n\nCode\nIntragenomic_conflict &lt;-\n  results %&gt;%\n  filter(v == 100, C != 4, C != 2, C != 1) %&gt;% \n  select(1:5, female_fitness_contrast, male_fitness_contrast) %&gt;%\n  pivot_wider(names_from = a, values_from = c(female_fitness_contrast, male_fitness_contrast)) %&gt;% \n  mutate(intragenomic_conflict_f_0_0.5 = female_fitness_contrast_0.5 - female_fitness_contrast_0,\n         #intragenomic_conflict_f_0.5_1 = female_fitness_contrast_1 - female_fitness_contrast_0.5,\n         intragenomic_conflict_f_0_1 = female_fitness_contrast_1 - female_fitness_contrast_0,\n         intragenomic_conflict_m_0_0.5 = male_fitness_contrast_0.5 - male_fitness_contrast_0,\n         #intragenomic_conflict_m_0.5_1 = male_fitness_contrast_1 - male_fitness_contrast_0.5,\n         intragenomic_conflict_m_0_1 = male_fitness_contrast_1 - male_fitness_contrast_0) %&gt;%\n  pivot_longer(cols = contains(\"intragenomic\"), names_to = \"contrast\", values_to = \"intragenomic_conflict\") %&gt;%\n  mutate(contrast = str_remove(contrast, \"intragenomic_conflict_\")) %&gt;% \n  separate_wider_delim(cols = contrast, delim = \"_\", names = c(\"Sex\", \"a_2\", \"a_1\")) %&gt;% \n  unite(\"contrast\", a_1:a_2) %&gt;% \n    mutate(contrast = case_when(\n    contrast == \"0.5_0\" ~ \"a = 0.5 - a = 0\",\n    contrast == \"1_0\" ~ \"a = 1 - a = 0\")) %&gt;%\n  mutate(intragenomic_conflict = case_when(\n    female_fitness_contrast_0 &lt; 0 & female_fitness_contrast_0.5 &gt; 0 & Sex == \"f\" & contrast == \"a = 0.5 - a = 0\" \n    ~ intragenomic_conflict,\n    female_fitness_contrast_0 &lt; 0 & female_fitness_contrast_1 &gt; 0 & Sex == \"f\" & contrast == \"a = 1 - a = 0\" \n    ~ intragenomic_conflict,\n    male_fitness_contrast_0 &gt; 0 & male_fitness_contrast_0.5 &lt; 0 & Sex == \"m\" & contrast == \"a = 0.5 - a = 0\" \n    ~ intragenomic_conflict,\n    male_fitness_contrast_0 &gt; 0 & male_fitness_contrast_1 &lt; 0 & Sex == \"m\" & contrast == \"a = 1 - a = 0\" \n    ~ intragenomic_conflict,\n    .default = NA)) %&gt;% \n  select(1:4, Sex, contrast, contains(\"intragenomic\")) \n    \n\nmake_genomic_conflict_plot &lt;- \n  function(sex, enter_subtitle){\n    Intragenomic_conflict %&gt;%\n      filter(Sex == sex) %&gt;% \n      #mutate(C = as.numeric(C)) %&gt;% \n      ggplot(aes(x = r, y = D)) +\n      geom_blank() +\n      geom_tile(aes(fill = intragenomic_conflict)) + \n      #stat_contour(aes(z = intragenomic_conflict), colour = \"black\",\n       #     breaks = c(-.10, -.20, -.30, -.40, -.50, -.60, -.70, -.80, -.90, -.100,\n        #               .10, .20, .30, .40, .50, .60, .70, .80, .90, .100),\n         #   upright = TRUE) +\n      #stat_contour(aes(z = intragenomic_conflict*100), colour = \"black\", breaks = 0,\n       #    linetype = 2) +\n      scale_fill_gradientn(colours = pal2, limits = c(-1.25, 1.1), na.value = \"white\",\n                           labels = c(\"Strong conflict\", -0.5, \"No conflict\", 0.5, \"Strong conflict\")) +\n      facet_wrap(C~contrast, nrow = 2,\n                 scales = \"free\", strip.position = c(\"top\"),\n                 labeller = label_glue('contrast: {`contrast`}, C = {`C`}')) +\n      labs(x = expression(~italic(r)~', the relatedness coefficient'),\n           y = ~delta~'(inbreeding depression)',\n           fill = \"Intragenomic conflict\",\n           subtitle = enter_subtitle) +\n      scale_x_continuous(expand = c(0, 0)) + \n      scale_y_continuous(expand = c(0, 0)) + # labels = c(0, 25, 50, 75, 90)) +\n      theme(panel.border = element_rect(fill = NA, colour = \"black\", size = .8),\n            strip.background = element_rect(colour = \"black\", fill = \"Aliceblue\", linewidth = .8))\n  }\n\nmake_genomic_conflict_plot(sex = \"f\", \"Intragenomic conflict in females\")\nmake_genomic_conflict_plot(sex = \"m\", \"Intragenomic conflict in males\")\n\n\n\n\nWhen is there sexual conflict over inbreeding?\n\n\nCode\nautosomal_data &lt;-\n  results %&gt;%\n  filter(a == 1, v == 100,C != 4, C != 1) %&gt;% \n  mutate(sexual_conflict = male_fitness_contrast - female_fitness_contrast) %&gt;%\n   mutate(sexual_conflict_updated = \n           if_else(female_fitness_contrast &lt; 0 & male_fitness_contrast &gt; 0, sexual_conflict, NA),\n          Location = \"Autosomal\") \n\nX_data &lt;- \n  results %&gt;% \n  filter(a == 0.5, C != 4, C != 1, v == 100) %&gt;%  \n  select(1:5, contains(\"female\")) %&gt;% \n  rename(a_female = a) %&gt;% # this step makes the join work as intended\n  left_join(\n    results %&gt;% \n      filter(a == 1, C != 4, C != 1, v == 100) %&gt;% \n      select(1:5, starts_with(\"male\")) %&gt;% \n      rename(a_male = a) # this step makes the join work as intended\n  ) %&gt;%\n  mutate(sexual_conflict = male_fitness_contrast - female_fitness_contrast) %&gt;% \n  mutate(sexual_conflict_updated = \n           if_else(female_fitness_contrast &lt; 0 & male_fitness_contrast &gt; 0, sexual_conflict, NA),\n         Location = \"X-linked\")\n\nZ_data &lt;-\n  results %&gt;% \n  filter(a == 1, C != 4, C != 1, v == 100) %&gt;%  \n  select(1:5, contains(\"female\")) %&gt;% \n  rename(a_female = a) %&gt;% left_join(\n    \n    results %&gt;% \n      filter(a == 0.5, C != 4, C != 1, v == 100) %&gt;% \n      select(1:5, starts_with(\"male\")) %&gt;% \n      rename(a_male = a)\n  ) %&gt;% \n  mutate(sexual_conflict = male_fitness_contrast - female_fitness_contrast) %&gt;%\n    mutate(sexual_conflict_updated = \n             if_else(female_fitness_contrast &lt; 0 & male_fitness_contrast &gt; 0, sexual_conflict, NA),\n           Location = \"Z-linked\")\n\n\n\nSexual_conflict_plot &lt;-\n  bind_rows(autosomal_data, X_data, Z_data) %&gt;%\n  ggplot(aes(x = r, y = D)) +\n  geom_blank() +\n  geom_tile(aes(fill = sexual_conflict_updated)) + \n  # stat_contour(aes(z = sexual_conflict_updated), colour = \"black\",\n  #      breaks = c(-.10, -.20, -.30, -.40, -.50, -.60, -.70, -.80, -.90, -.100,\n  #                .10, .20, .30, .40, .50, .60, .70, .80, .90, .100),\n  #    upright = TRUE) +\n  #stat_contour(aes(z = sexual_conflict*100), colour = \"black\", breaks = 0,\n  #    linetype = 2) +\n  scale_fill_gradientn(colours = pal2, limits = c(-1.25, 1.1), na.value = \"white\",\n                       labels = c(\"Strong conflict, female (+)\", -0.5, \n                                  \"No conflict\", 0.5, \"Strong conflict, male (+)\")) +\n  facet_wrap(Location~C, \n             scales = \"free\", strip.position = c(\"top\"),\n             labeller = label_glue('{`Location`}, C = {`C`}')) +\n  labs(x = expression(~italic(r)~', the relatedness coefficient'),\n       y = ~delta~'(inbreeding depression)',\n       fill = \"Intensity of\\nsexual conflict\") +\n  scale_x_continuous(expand = c(0, 0)) + \n  scale_y_continuous(expand = c(0, 0)) + # labels = c(0, 25, 50, 75, 90)) +\n  theme(panel.border = element_rect(fill = NA, colour = \"black\", size = .8),\n        strip.background = element_rect(colour = \"black\", fill = \"Aliceblue\", linewidth = .8))\n  \nSexual_conflict_plot\n\n\n\n\nThe cytoplasmic case\nThe results for cytoplasmic alleles are intuitive. Inbreeding can evolve through selection on either sex, but there is very little sexual antagonism over inbreeding, as selection optimises female fitness in both cases. The extent to which the inbreeding strategy is favoured can vary but the sign will never be opposing.\n\n\nCode\nFemale_cyto_plot &lt;-\n  results %&gt;%\n  filter(v != 10, C != 2 & C != 4, a == 0) %&gt;% \n  ggplot(aes(x = r, y = D)) +\n  geom_blank() +\n  geom_raster(aes(fill = female_fitness_contrast)) + \n  stat_contour(aes(z = female_fitness_contrast*100), colour = \"black\", binwidth = 25,\n               breaks = c(-100, -75, -50, -25, 25, 50, 75, 100)) +\n  stat_contour(aes(z = female_fitness_contrast*100), colour = \"black\", breaks = 0,\n               linetype = 2) +\n  scale_fill_gradientn(colours = pal1, breaks = c(-1, -0.5, 0, 0.5, 1), limits = c(-1.5, 1.5)) +\n  facet_wrap(v ~ C, \n             scales = \"free\", nrow = 3, strip.position = c(\"top\"),\n             labeller = label_glue('v = {`v`}, C = {`C`}')) +\n  labs(x = expression(~italic(r)~', the relatedness coefficient'),\n       y = ~delta~'(inbreeding depression)',\n       fill = \"Inbreeding fitness\",\n       subtitle = \"Alleles present in females\") +\n  scale_x_continuous(expand = c(0, 0)) + \n  scale_y_continuous(expand = c(0, 0)) + # labels = c(0, 25, 50, 75, 90)) +\n  theme(panel.border = element_rect(fill = NA, colour = \"black\", linewidth = .8),\n        strip.background = element_rect(colour = \"black\", fill = \"Aliceblue\", size = .8))\n\n\nMale_cyto_plot &lt;-\n  results %&gt;%\n  filter(v != 10, C != 2 & C != 4, a == 1) %&gt;%  \n  ggplot(aes(x = r, y = D)) +\n  geom_blank() +\n  geom_tile(aes(fill = cyto_male_fitness_contrast)) + \n  stat_contour(aes(z = cyto_male_fitness_contrast*100), colour = \"black\", binwidth = 25,\n               breaks = c(-75, -50, -25, 25, 50, 75, 100)) +\n  stat_contour(aes(z = cyto_male_fitness_contrast*100), colour = \"black\", breaks = 0,\n               linetype = 2) +\n  scale_fill_gradientn(colours = pal1, breaks = c(-1, -0.5, 0, 0.5, 1), limits = c(-1.5, 1.5)) +\n  facet_wrap(v ~ C,\n             scales = \"free\", nrow = 3, strip.position = c(\"top\"),\n             labeller = label_glue('v = {`v`}, C = {`C`}')) +\n  labs(x = expression(~italic(r)~', the relatedness coefficient'),\n       y = ~delta~'(inbreeding depression)',\n       fill = \"Inbreeding fitness\",\n       subtitle = \"Cytoplasmic alleles present in males\") +\n  scale_x_continuous(expand = c(0, 0)) + \n  scale_y_continuous(expand = c(0, 0)) + # labels = c(0, 25, 50, 75, 90)) +\n  theme(panel.border = element_rect(fill = NA, colour = \"black\", size = .8),\n        strip.background = element_rect(colour = \"black\", fill = \"Aliceblue\", size = .8))\n\nFemale_cyto_plot\n\nMale_cyto_plot"
  }
]